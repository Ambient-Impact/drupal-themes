// -----------------------------------------------------------------------------
//   Paragraph entity styles
// -----------------------------------------------------------------------------

@use 'sass:color';
@use 'sass/helpers/colour';
@use 'sass/variables/motion';

// This provides styles for the 'compact' Paragraph view mode, which is
// currently only used on the front page. This view mode's styles restrict the
// height of the first Paragraph item and applies a linear gradient that fades
// out the Paragraph at the bottom.
//
// Note that until the horizontal-bleed-background is reworked and the site
// layout uses flexbox or grid to lay out the full width bars, we can't use CSS
// masks to fade out the Paragraph item as it'll cut off the bars outside of the
// layout column. Instead, we're overlaying a generated content element with a
// gradient background that matches the site background colour while clipping
// the bottom of the element with a clip-path: polygon().
//
// @link https://developer.mozilla.org/en-US/docs/Web/CSS/mask-image

///
/// Paragraph item 'compact' view mode maximum height.
///
$paragraph-compact-max-height: 7em;

.paragraph--view-mode--compact {
  .field__item:first-child > & {
    ///
    /// Paragraph item compact clip-path polygon.
    ///
    $polygon: polygon(
      -50vw 0,
      calc(100% + 50vw) 0,
      calc(100% + 50vw) 100%,
      -50vw 100%
    );

    ///
    /// Paragraph item compact fade out gradient on light backgrounds.
    ///
    /// @link https://ambientimpact.com/web/snippets/safari-bug-with-gradients-that-fade-to-transparent
    ///   Explanation of why we use the background colour with zero opacity
    ///   instead of 'transparent'.
    ///
    /// @link https://github.com/larsenwork/postcss-easing-gradients
    ///   Uses this PostCSS plug-in to ease the gradient to create a less harsh
    ///   fade to transparent, similar to how Photoshop does its gradients.
    ///
    $gradient-light: linear-gradient(
      color.adjust(colour.$background-colour-light, $alpha: -1),
      motion.$easing-decelerate,
      colour.$background-colour-light
    );

    ///
    /// Paragraph item compact fade out gradient on dark backgrounds.
    ///
    /// @link https://ambientimpact.com/web/snippets/safari-bug-with-gradients-that-fade-to-transparent
    ///   Explanation of why we use the background colour with zero opacity
    ///   instead of 'transparent'.
    ///
    /// @link https://github.com/larsenwork/postcss-easing-gradients
    ///   Uses this PostCSS plug-in to ease the gradient to create a less harsh
    ///   fade to transparent, similar to how Photoshop does its gradients.
    ///
    $gradient-dark: linear-gradient(
      color.adjust(colour.$background-colour-dark, $alpha: -1),
      motion.$easing-decelerate,
      colour.$background-colour-dark
    );

    @supports (box-sizing: border-box) and (width: 1vw) and
    (clip-path: #{$polygon}) {

      // Required to correctly position the gradient overlay element.
      position: relative;

      // This clips the first field contained in the Paragraph item to a
      // max-height and with a clip-path. Note that we can't do this on the
      // Paragraph item itself, as that'll cause 1 pixel rounding errors along
      // the bottom of the gradient where it should be fading into the
      // background colour in Chrome/Blink and sometimes in Firefox/Gecko.
      > .field:first-child {
        box-sizing: border-box;
        max-height: $paragraph-compact-max-height;
        clip-path:  $polygon;
      }

      // This ensures that clipped field content doesn't affect the page layout.
      // Note that we have to target both fields that have field items as
      // children and those that have the field element double as the only field
      // item.
      > .field:first-child > .field__item,
      > .field.field__item:first-child {
        max-height: $paragraph-compact-max-height;
        overflow:   hidden;
      }

      // If there happen to be any subsequent fields in this Paragraph item,
      // just remove them entirely.
      > .field:not(:first-child) {
        display: none;
      }

      // This is the actual gradient overlay element.
      &::before {
        content: '';

        position: absolute;

        top:    0;
        bottom: -1px;
        left:   50%;

        width: 100vw;

        margin-left: -50vw;

        // @todo Should we use the z-index function for this, or does it matter
        // since the parent is position: relative and thus creates its own
        // stacking context?
        z-index: 100;

        background-image: $gradient-light;

        @include colour.on-dark-colour-scheme {
          background-image: $gradient-dark;
        }
      }

    // Disabled mask-image styles for future use.

    // $gradient-mask: linear-gradient(black, transparent);

    // @supports (mask-image: $gradient-mask) {
    //   max-height: $paragraph-compact-max-height;

    //   overflow-y: hidden;

    //   mask-image: $gradient-mask;
    // }
    }
  }

  // Hide any additional Paragraph items in the field.
  //
  // @todo This should be done as a Paragraph entity display formatter.
  .field__item:not(:first-child) > & {
    display: none;
  }
}
