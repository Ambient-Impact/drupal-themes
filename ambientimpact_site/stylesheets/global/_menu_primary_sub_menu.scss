// -----------------------------------------------------------------------------
//   Primary site menu - sub-menus
// -----------------------------------------------------------------------------

///
/// The amount to allow for drop shadows when clipping sub-menus.
///
/// This is in px rather than ems because shadows currently use px.
///
$menu-primary-sub-menu-clip-padding: 10px;

///
/// Overflow menu width when all items are in overflow.
///
/// This implies a narrow viewport, e.g. mobile.
///
$menu-primary-all-overflow-sub-menu-width: 100vw;

///
/// Primary menu sub-menu show transition duration.
///
/// This should be shorter than the hide duration to make the sub-menu feel
/// quick to respond to user action.
///
$menu-primary-sub-menu-show-duration: 250ms;

///
/// Primary menu sub-menu hide transition duration.
///
/// This should be longer than the show duration to make the sub-menu feel a bit
/// more relaxed after having responded to user action.
///
$menu-primary-sub-menu-hide-duration: 400ms;

///
/// Primary menu sub-menu item reveal transition stagger interval.
///
/// This is used to calculate the transition-delay property by multiplying this
/// value with the --menu-item-reveal-transition-delay custom property in the
/// menu-primary-sub-menu-show mixin.
///
/// @see {mixin} menu-primary-sub-menu-show
///
$menu-primary-sub-menu-item-reveal-stagger-interval: 40ms;

///
/// @supports test for our primary menu sub-menu transform and clipping.
///
/// Additionally wraps @content in a (prefers-reduced-motion: no-preference)
/// media query.
///
/// @content
///   Properties to wrap in the @supports and @media blocks.
///
/// @require {Function} menu-primary-clip-path()
/// @require {Variable} $menu-primary-sub-menu-clip-padding
///
@mixin menu-primary-supports-translate-clip-path {
  $padding: $menu-primary-sub-menu-clip-padding;

  @supports (transform: translateY(calc(-100% - #{$padding}))) and
  (clip-path: menu-primary-clip-path()) {
    @media (prefers-reduced-motion: no-preference) {
      @content;
    }
  }
}

///
/// Hide a sub-menu of the primary menu.
///
/// This hides a menu using one of two methods, depending on whether our
/// clip-path and the translate transform are both supported:
///
/// * If not supported, the menu is moved way off to the left, with zero opacity
///   and pointer-events: none.
///
/// * If supported, the menu is kept in its current location laterally but
///   translated upwards so that its totally hidden inside its parent menu item.
///   This allows us to transition the translation, when available.
///
/// @see {Mixin} menu-primary-sub-menu-show
///   The inverse of the current mixin; shows the sub-menu.
///
/// @require {Mixin}    menu-primary-supports-translate-clip-path
/// @require {Variable} $menu-primary-sub-menu-clip-padding
///
@mixin menu-primary-sub-menu-hide {
  left:       -9999em;
  opacity:    0;

  @supports (pointer-events: none) {
    left:     auto;
    pointer-events: none;
  }

  @include menu-primary-supports-translate-clip-path {
    @include root-conditions(('[dir=ltr]'), 'html') {
      left:   auto;
    }
    @include root-conditions(('[dir=rtl]'), 'html') {
      right:  auto;
    }

    opacity:  1;

    transform: translateY(calc(-100% - #{$menu-primary-sub-menu-clip-padding}));
  }

  > .menu-item {
    opacity: 0;

    // Only translate if the user hasn't specified they prefer reduced motion.
    //
    // @see https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-reduced-motion
    @media (prefers-reduced-motion: no-preference) {
      transform: translateY(-100%);
    }
  }
}

///
/// Show a sub-menu of the primary menu.
///
/// @see {Mixin} menu-primary-sub-menu-hide
///   The inverse of the current mixin; hides the sub-menu.
///
/// @require {Mixin}    menu-primary-supports-translate-clip-path
/// @require {Mixin}    root-conditions
/// @require {Variable} $menu-primary-sub-menu-show-duration
/// @require {Variable} $menu-primary-sub-menu-item-reveal-stagger-interval
///
@mixin menu-primary-sub-menu-show {
  @include root-conditions(('[dir=ltr]'), 'html') {
    left:   auto;
  }
  @include root-conditions(('[dir=rtl]'), 'html') {
    right:  auto;
  }

  opacity:  1;

  pointer-events: auto;

  @include menu-primary-supports-translate-clip-path {
    transform: translateY(-1px);
  }

  transition-duration: $menu-primary-sub-menu-show-duration;

  > .menu-item {
    opacity: 1;

    // Only translate if the user hasn't specified they prefer reduced motion.
    //
    // @see https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-reduced-motion
    @media (prefers-reduced-motion: no-preference) {
      transform: translateY(0);
    }

    // This staggers the menu item reveal transitions based on the custom
    // property set in menu_primary.js so that the items appear to fall into
    // place from last to first.
    transition-delay: calc(
      (var(--menu-item-reveal-transition-delay, 0) - 1) *
      #{$menu-primary-sub-menu-item-reveal-stagger-interval}
    );
  }
}

///
/// Primary menu item clip-path polygon to clip sub-menus.
///
/// This essentially creates a polygon that covers both the bounding box of the
/// menu item itself (so that it's not clipped) and a larger area below and to
/// both sides so that sub-menus can be clipped in such a way as to appear to be
/// part of the same material as the menu bar, while also translating up into
/// the menu bar when closed.
///
/// If you're having trouble visualizing this, Firefox's devtools have an
/// excellent tool for this: inspect the menu item and then click the four-
/// pointed polygon icon directly after "clip-path:", which will show the
/// polygon and its vertices.
///
/// **Very important warning**: don't set either $width or $height to some huge
/// amount like 9999em, because while this seems to work fine in Firefox, Chrome
/// 76.0.3809.100 64-bit on Windows 10 has been observed to reliably freeze the
/// OS, eventually crashing it, probably due to video driver issues. This may
/// be an isolated case to this particular development machine, but don't take
/// this chance.
///
/// @param {Number} $width [10em]
///   The amount to extend the sub-menu portion of the polygon to the left and
///   right past the edges of the menu-item's bounding box.
///
/// @param {Number} $height [25em]
///   The amount to extend the sub-menu portion of the polygon downwards past
///   the bottom edge of the menu-item's bounding box.
///
/// @return {String}
///   The polygon() declaration as described in this functions description.
///
@function menu-primary-clip-path(
  $width:   10em,
  $height:  25em
) {
  @return polygon(
    // Note the - 1px in the Y axis: this is to fix rounding errors where the
    // menu would display a single pixel line along the top where it joins with
    // the menu bar. This was most prominent in Blink-based browsers, but Gecko
    // would also exhibit this if zoomed in and then out again on mobile.
    -$width                 calc(100% - 1px),
    0                       calc(100% - 1px),
    0                       0,
    100%                    0,
    100%                    calc(100% - 1px),
    calc(100% + #{$width})  calc(100% - 1px),
    calc(100% + #{$width})  calc(100% + #{$height}),
    -$width                 calc(100% + #{$height})
  );
}

.region-primary-menu {
  .menu .menu {
    // Reset lateral margins that Classy sets.
    margin-left:  0;
    margin-right: 0;
  }

  .block > .menu {
    // Don't display sub-menus until overflow functionality is attached because
    // they get clipped entirely because of overflow-x: auto;
    > .menu-item > .menu {
      display: none;
    }
    &--overflow-enhanced > .menu-item > .menu {
      display: block;
    }

    > .menu-item--expanded {
      ///
      /// The local stacking order of elements; later in the list is higher.
      ///
      $local-stacking-order: menu, background, content;

      position: relative;

      // The clip.
      clip-path: menu-primary-clip-path();

      // This solid colour block is placed below the menu item contents but
      // above the sub-menu, so that when the sub-menu slides up into its hidden
      // state, it's not visible behind the menu item contents, the latter of
      // which we need avoid clipping so that they're visible. Note that we're
      // not using the menu-primary-supports-translate-clip-path mixin, as that
      // would not apply this if the user prefers reduced motion.
      @supports (clip-path: menu-primary-clip-path()) {
        &::after {
          content:  '';
          display:  block;

          position: absolute;

          // The -1px is to avoid rounding errors in Chrome where the sub-menu
          // contents can sometimes be seen around the edges a little. The 1px
          // bottom is to match the clip-path Y coordinates.
          top:      -1px;
          bottom:   1px;
          left:     -1px;
          right:    -1px;

          z-index:  index($local-stacking-order, background);

          background-color: $menu-primary-background-colour;
        }
      }

      > a,
      > button {
        position: relative;

        z-index:  index($local-stacking-order, content);
      }

      > .menu {
        position: absolute;

        z-index:  index($local-stacking-order, menu);

        background-color: $menu-primary-background-colour;

        border-bottom-left-radius:  $material-border-radius;
        border-bottom-right-radius: $material-border-radius;

        @include material-shadow($depth: 2);

        transition-property: opacity, transform;
        transition-duration: $menu-primary-sub-menu-hide-duration;
        transition-timing-function: $easing-standard;

        will-change: transform;
      }
    }

    > .menu-item {
      > .menu {
        @include menu-primary-sub-menu-hide;

        // Sub-menus look better if they're not narrower than the parent item.
        min-width: 100%;

        // Override the base layout max-width, as that would force the menu to
        // shrink to fit narrow parent menu items if the menu contents are wider
        // that its parent. If available, we set it to 100vw to avoid making it
        // wider than the viewport.
        max-width: none;
        max-width: 100vw;

        > .menu-item {
          transition-property: opacity, transform;
          transition-duration: $menu-primary-sub-menu-hide-duration;
          transition-timing-function: $easing-standard;
        }
      }

      // Show the sub-menu on the pointer hovering over it or its parent, when
      // the parent link is focused (e.g. by keyboard, etc.), or when anything
      // is focused inside of the sub-menu.
      &:not(.menu-item--menu-closed):hover > .menu,
      &:not(.menu-item--menu-closed) > a:focus + .menu,
      &:not(.menu-item--menu-closed) > button:focus + .menu,
      &:not(.menu-item--menu-closed).ally-focus-within > .menu,
      &--menu-open > .menu {
        @include menu-primary-sub-menu-show;
      }
      // This needs to be separate as not all browsers support it and
      // non-supporting browsers would ignore any rule it was part of.
      &:not(.menu-item--menu-closed):focus-within > .menu {
        @include menu-primary-sub-menu-show;
      }
    }

    // When all items are in the overflow menu, centre the overflow menu under
    // the menu bar rather than have it be to one side.
    &--all-overflow .menu-overflow > .menu {
      width:  $menu-primary-all-overflow-sub-menu-width;

      left:   50%   !important;
      right:  auto  !important;

      margin-left: -($menu-primary-all-overflow-sub-menu-width / 2);
    }

    // Indent nested menus to indicate hierarchy.
    .menu .menu {
      @include root-conditions(('[dir=ltr]'), 'html') {
        padding-left:   1em;
      }
      @include root-conditions(('[dir=rtl]'), 'html') {
        padding-right:  1em
      }
    }
  }

  .menu-overflow > .menu {
    @include root-conditions(('[dir=ltr]'), 'html') {
      right: 0;
    }
    @include root-conditions(('[dir=rtl]'), 'html') {
      left:  0;
    }
  }

  .block > .menu > .menu-item > .menu {
    // This ensures that drop-down menus don't extend past the bottom of the
    // screen on short screen sizes (e.g. mobile), and are scrollable so that
    // all items can be accessed without having to worry about the menu
    // disappearing. The 5.6em is roughly the space the menu bar itself and the
    // site title take up - this is for when the menu bar is still considered at
    // the top by Headroom.js.
    max-height: calc(100vh - 5.6em);

    overflow-y: auto;
  }

  // When Headroom.js believes the menu bar is no longer at the top but is
  // floating, substract a smaller value from the screen height, roughly equal
  // to the height of the menu bar.
  &.headroom--not-top .block > .menu > .menu-item > .menu {
    max-height: calc(100vh - 2.9em);
  }
}
