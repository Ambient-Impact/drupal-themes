// -----------------------------------------------------------------------------
//   Primary site menu
// -----------------------------------------------------------------------------

///
/// Primary menu item font size when large font size breakpoint doesn't match.
///
$menu-primary-font-size-small:  100%;

///
/// Primary menu item font size when large font size breakpoint matches.
///
$menu-primary-font-size-large:  110%;

///
/// Primary menu background colour.
///
$menu-primary-background-colour: $ambientimpact-orange;

///
/// Primary menu item foreground colour.
///
$menu-primary-item-foreground-colour: get-contrasting-colour(
    $background:          $menu-primary-background-colour,
    $foreground-on-light: $foreground-colour-on-light,
    $foreground-on-dark:  $foreground-colour-on-dark
  );

///
/// Primary menu item horizontal padding.
///
$menu-primary-item-padding-x:   $layout-gutter;

///
/// Primary menu item vertical padding.
///
$menu-primary-item-padding-y:   $general-spacing * 0.75;

///
/// Primary menu item underline height, used to indicate active menu item.
///
$menu-primary-item-underline-height:  4px;

@include add-breakpoints((
  // At which height to start using $menu-primary-font-size-large.
  'menu-primary-font-size-large': get-breakpoint-value('height-small')
));

///
/// Set primary menu item colours.
///
@mixin menu-primary-item-colours {
  @include link-colours(
    $background:      $menu-primary-background-colour,
    $normal-on-dark:  $menu-primary-item-foreground-colour,
    $hover-on-dark:   $menu-primary-item-foreground-colour
  );
}

///
/// Set primary menu item indicator transition properties.
///
@mixin menu-primary-item-indicator-transition {
  transition-duration: 0.1s;

  transition-property: transform;
}

///
/// Set primary menu item indicator as active, i.e. current/hovered/focussed.
///
@mixin menu-primary-item-indicator-active {
  // Using scale rather than translate as that has less of a chance of
  // accidentally being shown if the browser has issues rendering, e.g. Firefox
  // during and after the front page animations.
  transform: scaleY(1);

  // This is necessary to override the default instant transition in on links,
  // so we transition in and out at the same rate, which looks better for this.
  @include menu-primary-item-indicator-transition;
}

///
/// Set primary menu item indicator as inactive.
///
@mixin menu-primary-item-indicator-inactive {
  transform: scaleY(0);
}

///
/// Set primary menu item indicator state when menu is :hover or :focus-within.
///
@mixin menu-primary-item-active-path-indicator-hover-focus-within {
  @include menu-item-is-active-path {
    &::after {
      @include menu-primary-item-indicator-inactive;
    }

    @include link-hover {
      &::after {
        @include menu-primary-item-indicator-active;
      }
    }
  }
}

///
/// Hide a sub-menu of the primary menu.
///
@mixin menu-primary-sub-menu-hide {
  // Until interacted with, sub-menus are absolutely positioned way off to the
  // left and are invisible and unclickable.
  left:     -9999em;
  opacity:  0;
  pointer-events: none;
}

///
/// Show a sub-menu of the primary menu.
///
@mixin menu-primary-sub-menu-show {
  @include root-conditions(('[dir=ltr]'), 'html') {
    left:   0;
  }
  @include root-conditions(('[dir=rtl]'), 'html') {
    right:  0;
  }

  opacity:  1;
  pointer-events: auto;
}

///
/// Transform a primary menu sub-menu indicator to its open state.
///
@mixin menu-primary-sub-menu-indicator-open {
  // Rotate the icon 180 degrees when the sub-menu is open, so that the icon
  // points up rather than down.
  @include on-icon-icon {
    transform: rotate(180deg);
  }
}

.region-primary-menu {
  ///
  /// The local stacking order of elements; later in the list is higher.
  ///
  $local-stacking-order: background, content;

  margin-top:     0;
  margin-bottom:  3em;

  @include horizontal-bleed-background(
    $colour:  $menu-primary-background-colour,
    $z-index: index($local-stacking-order, background),
    // Don't use the topmost shadow, as that would show on top of the site
    // title. See _header.scss for the topmost shadow.
    $shadow:  (false, true, true)
  );

  &.headroom {
    // Make sure we're sticky if Headroom is active, as the horizontal-
    // bleed-background overrides it.
    position: sticky;
  }

  .block > .menu {
    position:   relative;

    display:    flex;

    // Override base, as this cuts off the right side of the menu. D:
    max-width:  none;

    margin-top:     0;
    margin-bottom:  0;

    @include root-conditions(('[dir=ltr]'), 'html') {
      margin-left:  -$menu-primary-item-padding-x;
      margin-right: -$menu-primary-item-padding-x;
    }

    // We have to specify the RTL selector so that we override Classy's menu
    // margins.
    @include root-conditions(('[dir=rtl]'), 'html') {
      margin-left:  -$menu-primary-item-padding-x;
      margin-right: -$menu-primary-item-padding-x;
    }

    z-index:    index($local-stacking-order, content);

    // This allows the menu items to scroll horizontally when the menu has not
    // been enhanced with the overflow functionality or that fails to correctly
    // execute for any reason.
    overflow-x: auto;

    // When overflow is available, switch to visible so that the vertical
    // overflow is shown, which is not the case when the horizontal is clipped
    // because reasons.
    &--overflow-enhanced {
      overflow-x: visible;
    }

    // Space items evenly.
    // IMPORTANT: space-around causes some odd overflow hiding.
    justify-content: space-between;

    font-size: $menu-primary-font-size-small;

    @include media('>=menu-primary-font-size-large') {
      font-size: $menu-primary-font-size-large;
    }

    .menu {
      margin-left:  0;
      margin-right: 0;
    }

    // Don't display sub-menus until overflow functionality is attached because
    // they get clipped entirely because of overflow-x: auto;
    > .menu-item > .menu {
      display: none;
    }
    &--overflow-enhanced > .menu-item > .menu {
      display: block;
    }

    > .menu-item--expanded,
    > .menu-overflow {
      position: relative;

      > .menu {
        position: absolute;

        background-color: $menu-primary-background-colour;

        @include material-shadow($depth: 2);
      }
    }

    .menu-overflow {
      &__toggle {
        // Remove default <button> styling from this.
        border-width:     0;
        background-color: transparent;
      }

      > .menu {
        @include root-conditions(('[dir=ltr]'), 'html') {
          right: 0;
        }
        @include root-conditions(('[dir=rtl]'), 'html') {
          left:  0;
        }

        min-width: 10em;
      }
    }

    > .menu-item {
      > .menu {
        @include menu-primary-sub-menu-hide;

        // Sub-menus look better if they're not narrower than the parent item.
        min-width: 100%;
      }

      // Show the sub-menu on the pointer hovering over it or its parent, when
      // the parent link is focused (e.g. by keyboard, etc.), or when anything
      // is focused inside of the sub-menu.
      &:hover > .menu,
      > :link:focus + .menu,
      &.ally-focus-within > .menu {
        @include menu-primary-sub-menu-show;
      }
      // This needs to be separate as not all browsers support it and
      // non-supporting browsers would ignore any rule it was part of.
      &:focus-within > .menu {
        @include menu-primary-sub-menu-show;
      }

      &--expanded {
        // Transform the sub-menu indicator to its open state when a sub-menu is
        // open.
        &:hover > :link,
        > :link:focus,
        &.ally-focus-within > :link {
          @include menu-primary-sub-menu-indicator-open;
        }
        &:focus-within > :link {
          @include menu-primary-sub-menu-indicator-open;
        }
      }
    }

    .menu-item {
      // Remove padding added by Classy.
      padding-top: 0;

      &--expanded {
        // Remove the expanded indicator.
        list-style: none;

        @include on-icon-container {
          // For drop-down menus, icons look better after the text, rather than
          // before.
          @include set-icon-order(text-first);
        }

        @include icon-transform-transition;
      }

      @include menu-item-is-active-path {
        @include menu-primary-item-colours;

        // Active path item indicators are visible by default. This is necessary
        // in case the browser doesn't support :focus-within and our polyfill
        // doesn't get applied.
        &::after {
          @include menu-primary-item-indicator-active;
        }
      }
    }

    a,
    .menu-overflow__toggle {
      position: relative;

      display:  block;

      padding:  $menu-primary-item-padding-y $menu-primary-item-padding-x;

      @include menu-primary-item-colours;

      // Remove fancy link underlines.
      @include remove-fancy-link-underlines;

      @include material-ripple;

      // Don't wrap to new lines since the container scrolls.
      white-space: nowrap;

      // This pseudo-element is used to create the underline for current and
      // hovered/focussed menu item links.
      &::after {
        content:  '';

        position: absolute;

        left:     $menu-primary-item-padding-x;
        right:    $menu-primary-item-padding-x;
        bottom:   0;

        height:   $menu-primary-item-underline-height;

        background-color: $foreground-colour-on-dark;

        transform-origin: bottom center;

        // Hidden by default by being outside of overflow.
        @include menu-primary-item-indicator-inactive;
        will-change:  transform;

        // Set the transition for the indicator when interaction has ceased. The
        // menu-primary-item-indicator-active mixin sets the transition in.
        @include menu-primary-item-indicator-transition;
      }

      // This makes the indicator visible on an item when it's being interacted
      // with.
      @include link-hover {
        &::after {
          @include menu-primary-item-indicator-active;
        }
      }
    }

    // Hide the indicator when the menu matches :focus-within. Note that this
    // has to be a separate rule from the rest so that a browser that doesn't
    // support the selector doesn't ignore the other selectors, which it should
    // understand.
    &:focus-within .menu-item {
      @include menu-primary-item-active-path-indicator-hover-focus-within;
    }
    // Hover and polyfilled :focus-within.
    &:hover,
    &.ally-focus-within {
      .menu-item {
        @include menu-primary-item-active-path-indicator-hover-focus-within;
      }
    }
  }
}
