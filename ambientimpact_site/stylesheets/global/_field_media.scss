// -----------------------------------------------------------------------------
//   Media field partial
// -----------------------------------------------------------------------------

@use '../../../ambientimpact_base/stylesheets/global/layout.vertical_spacing' as vertical-spacing;
@use '../../../ambientimpact_base/stylesheets/components/field_media' as field-media;
@use 'link/link.colour' as link-colour;
@use 'sass:list';
@use 'sass:math';
@use 'sass/helpers/colour';
@use 'sass/helpers/layout';
@use 'sass/patterns/horizontal_bleed_background' as horizontal-bleed-background;
@use 'sass/variables/general';

///
/// Media field background colour on light backgrounds.
///
$background-colour-on-light: black !default;

///
/// Media field background colour on dark backgrounds.
///
$background-colour-on-dark: hsl(0, 0%, 30%) !default;

///
/// Common styles for media fields.
///
/// @param {Bool} $use-top-shadow
///   Whether to include the top shadow when using mixin
///   horizontal-bleed-background.
///
@mixin media-field($use-top-shadow: true) {
  $local-stacking-order:  background, content;
  $shadow-settings:       true;

  @if $use-top-shadow == false {
    $shadow-settings: (false, true, true);
  }

  --field-item-gap: #{field-media.$spacing};

  padding: var(--field-item-gap) 0;

  @include colour.set(
    $background:  $background-colour-on-light
  );

  @include horizontal-bleed-background.set(
    $colour:  $background-colour-on-light,
    $z-index: list.index($local-stacking-order, background),
    $shadow:  $shadow-settings
  );

  :any-link {
    @include link-colour.set($background-colour-on-light);
  }

  @include colour.on-dark-scheme {
    @include horizontal-bleed-background.set(
      $colour:  $background-colour-on-dark,
      $z-index: list.index($local-stacking-order, background),
      $shadow:  $shadow-settings
    );

    :any-link {
      @include link-colour.set($background-colour-on-dark);
    }
  }

  // When one or more field items are descendents, target those.
  .field__item,
  // When the field itself is also the field item, target the <figure>.
  &.field__item figure {
    position: relative;

    z-index: list.index($local-stacking-order, content);
  }

  img, picture {
    // This is in case a transparent image is used, which normally assumes a
    // light background colour.
    @include colour.set(
      $background:  white
    );
  }
}

.field--type-image:not(.form-wrapper),
.field--entity-reference-type-media:not(.field--name-field-project-media) {
  @include media-field;
}

// This undoes some of the properties of the media-field mixin to avoid nesting
// two instances of the mixin. When a media entity is in an entity reference
// field, we only want the styles to apply to the entity reference field.
.field--type-entity-reference .field--type-image:not(.form-wrapper) {

  &::before {
    display: none;
  }

  margin-top:     0;
  margin-bottom:  0;
  padding-top:    0;
  padding-bottom: 0;

}

// The project media field is a special case that adds a two column layout when
// space allows and accounts for the SVG node titles.
.field--name-field-project-media {

  // Don't use the topmost shadow, as that would show on top of the node
  // title. See _node_project.scss for the topmost shadow.
  @include media-field($use-top-shadow: false);

  margin-top: 0;
  padding:    calc(var(--field-item-gap) / 2) 0;

  @include layout.use-grid {
    padding-top:    var(--field-item-gap);
    padding-bottom: var(--field-item-gap);
  }

  // Remove field item spacing, since we use CSS grid below.
  @include vertical-spacing.against-previous(
    '.field__item',
    $spacing-small: 0,
    $spacing-large: 0
  );

  .field__item {
    padding: calc(var(--field-item-gap) / 2) 0;
  }

  // If available, use CSS grid to lay out the project images in a two column
  // grid.
  @include layout.use-grid {
    .field__items {
      display:                grid;
      grid-template-columns:  1fr 1fr;
      grid-gap:               var(--field-item-gap);
    }

    .field__item {
      padding-top:    0;
      padding-bottom: 0;

      // Odd last items span the whole row, since we know we have exactly two
      // columns.
      &:nth-child(odd):last-child {
        grid-column: 1 / -1;
      }
    }
  }

}
