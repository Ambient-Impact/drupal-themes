// -----------------------------------------------------------------------------
//   Media field partial
// -----------------------------------------------------------------------------

///
/// Media field background colour on light backgrounds.
///
$media-field-background-colour-on-light: black !default;

///
/// Media field background colour on dark backgrounds.
///
$media-field-background-colour-on-dark: hsl(0, 0, 30%) !default;

///
/// Common style for media fields.
///
/// @param {Bool} $use-top-shadow
///   Whether to include the top shadow when using mixin
///   horizontal-bleed-background.
///
@mixin media-field($use-top-shadow: true) {
  $local-stacking-order:  background, content;
  $shadow-settings:       true;

  @if $use-top-shadow == false {
    $shadow-settings: (false, true, true);
  }

  // Don't set horizontal margins as that needs to be left up to the base styles
  // to centre this horizontally, if need be.
  margin-top:     $general-spacing;
  margin-bottom:  $general-spacing;

  padding:  $media-field-spacing  0;

  @include set-colours(
    $background:  $media-field-background-colour-on-light
  );

  @include horizontal-bleed-background(
    $colour:  $media-field-background-colour-on-light,
    $z-index: index($local-stacking-order, background),
    $shadow:  $shadow-settings
  );

  :link, :visited {
    @include link-colours($media-field-background-colour-on-light);
  }

  @include on-dark-colour-scheme {
    @include horizontal-bleed-background(
      $colour:  $media-field-background-colour-on-dark,
      $z-index: index($local-stacking-order, background),
      $shadow:  $shadow-settings
    );

    :link, :visited {
      @include link-colours($media-field-background-colour-on-dark);
    }
  }

  // When one or more field items are descendents, target those.
  .field__item,
  // When the field itself is also the field item, target the <figure>.
  &.field__item figure {
    position: relative;

    z-index: index($local-stacking-order, content);
  }

  img, picture {
    // This is in case a transparent image is used, which normally assumes a
    // light background colour.
    @include set-colours(
      $background:  white
    );
  }

  // This adds a background block behind media when they've been hidden by the
  // project media IntersectionObserver so the space they fade into doesn't look
  // totally empty.
  .intrinsic-ratio {
    @include set-colours(
      $background: mix(
        $media-field-background-colour-on-light,
        $foreground-colour-on-light,
        75%
      )
    );

    @include on-dark-colour-scheme {
      @include set-colours(
        $background: mix(
          $media-field-background-colour-on-dark,
          $foreground-colour-on-dark,
          75%
        )
      );
    }
  }
}

// Image fields. The selector targets image fields that are not on a media
// entity inside of an entity reference field. This ensures that fields
// containing multiple media entities have one full bleed background, rather
// than one for each media entity.
*:not(.field--type-entity-reference) > * > *:not(.media) > .field--type-image:not(.form-wrapper) {
  // Anything that isn't the project images field.
  &:not(.field--name-field-project-images) {
    @include media-field;
  }
  // Project images field.
  &.field--name-field-project-images {
    // Don't use the topmost shadow, as that would show on top of the node
    // title. See _node_project.scss for the topmost shadow.
    @include media-field($use-top-shadow: false);

    margin-top: 0;
    padding:    ($media-field-spacing / 2) 0;

    @include use-grid {
      padding-top:    $media-field-spacing;
      padding-bottom: $media-field-spacing;
    }

    // Remove field item spacing, since we use CSS grid below.
    @include vertical-spacing-against-previous(
      '.field__item',
      $spacing-small: 0,
      $spacing-large: 0
    );

    .field__item {
      padding:  ($media-field-spacing / 2) 0;

      // This hides individual field items when they're off screen. We have to
      // use visibility: hidden; in order to get Firefox on Android to not
      // render them. See ../../javascript/project_media.js for details.
      &--off-screen .intrinsic-ratio__ratio {
        visibility: hidden;
        opacity:    0;
      }

      .intrinsic-ratio__ratio {
        // Short fade in when being shown from being off screen.
        transition: 200ms opacity linear;
      }
    }

    // If available, use CSS grid to lay out the project images in a two column
    // grid.
    @include use-grid {
      .field__items {
        display:                grid;
        grid-template-columns:  1fr 1fr;
        grid-gap:               $media-field-spacing;
      }

      .field__item {
        // This ensures that the intrinsic ratio wrapper doesn't collapse to
        // zero width.
        min-width:      100%;

        padding-top:    0;
        padding-bottom: 0;

        // Odd last items span the whole row, since we know we have exactly two
        // columns.
        &:nth-child(odd):last-child {
          grid-column: 1 / -1;
        }
      }
    }
  }
}

// Stand-alone media entity image fields.
*:not(.field--type-entity-reference) > * > .media > .field--type-image,
// Entity reference fields that contain media entities.
.field--name-field-animated-gifs,
.field--name-field-images,
.field--name-field-remote-video {
  &:not(.form-wrapper) {
    @include media-field;
  }
}
