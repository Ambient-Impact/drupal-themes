<?php

use Drupal\Component\Utility\Html;
use Drupal\Core\Render\Markup;

/**
 * Prepares variables for field_project_link templates.
 *
 * This sets the link text to contain the title of the parent node if the link
 * title has not been set and wraps the text in an icon.
 */
function ambientimpact_site_preprocess_field__field_project_link(
  &$variables, $hook
) {
  foreach ($variables['element']['#items'] as $key => $item) {
    // Determine if a title has been set for this link, using it if so but
    // falling back to the parent node's title.
    if ($item->title !== '') {
      $title = $item->title;
    } else {
      $title = $variables['element']['#object']->getTitle();
    }

    $text = t(
      'Visit <strong>@title</strong>',
      [
        '@title'  => $title,
      ]
    );

    $variables['items'][$key]['content']['#title'] = [
      '#type'     => 'ambientimpact_icon',
      '#icon'     => 'link',
      '#bundle'   => 'core',
      '#text'     => $text,
    ];
  }
}

/**
 * Prepares variables for field_source_link templates.
 *
 * This wraps the text in an icon.
 */
function ambientimpact_site_preprocess_field__field_source_link(
  &$variables, $hook
) {
  foreach ($variables['items'] as $key => &$item) {
    // Don't do anything to an item if the #title is not a string, which could
    // indicate modification by a module that we're not expecting.
    if (gettype($item['content']['#title']) !== 'string') {
      continue;
    }

    $item['content']['#title'] = [
      '#type'     => 'ambientimpact_icon',
      '#icon'     => 'link',
      '#bundle'   => 'core',
      '#text'     => $item['content']['#title'],
    ];
  }
}

/**
 * Prepares variables for field_web_tags templates.
 *
 * This wraps the text in an icon.
 */
function ambientimpact_site_preprocess_field__field_web_tags(
  &$variables, $hook
) {
  foreach ($variables['items'] as $key => &$item) {
    // Don't do anything to an item if the #title is not a string, which could
    // indicate modification by a module that we're not expecting.
    if (gettype($item['content']['#title']) !== 'string') {
      continue;
    }

    $item['content']['#title'] = [
      '#type'     => 'ambientimpact_icon',
      '#icon'     => 'bookmark_outline',
      '#bundle'   => 'core',
      '#text'     => $item['content']['#title'],
    ];
  }
}

/**
 * Prepares variables for 'title' field templates.
 *
 * This transliterates titles from various entities (primarily intended for
 * nodes, but others work too) to ASCII-only to avoid characters with accents,
 * as the Furore font does not support those and the browser would fall back to
 * another font, which would look out of place.
 *
 * @see https://api.drupal.org/api/drupal/core%21lib%21Drupal%21Core%21Language%21language.api.php/group/transliteration
 *   Documentation and example of how to transliterate.
 *
 * @todo Can this be moved to a preprocess function targetted only at this
 * field? E.g. ambientimpact_site_preprocess_field__title? That variation
 * doesn't seem to register.
 */
function ambientimpact_site_preprocess_field(&$variables, $hook) {
  if ($variables['field_name'] === 'title') {
    // Get the current language code.
    $langCode = \Drupal::languageManager()->getCurrentLanguage()->getId();

    // Instantiate the transliteration class.
    $transliteration = \Drupal::transliteration();

    foreach ($variables['items'] as $key => &$item) {
      // Don't do anything to an item if the item structure is not what we're
      // expecting, as that could indicate modification by a module that we
      // don't know about.
      if (!isset($item['content']['#context']['value'])) {
        continue;
      }

      $item['content']['#context']['value'] =
        $transliteration->transliterate(
          $item['content']['#context']['value'], $langCode
        );
    }
  }
}

/**
 * Preprocess variables for the 'web_snippets' view.
 *
 * This adds links to view all web development tags and to the web snippets RSS
 * feed.
 */
function ambientimpact_site_preprocess_views_view__web_snippets(&$variables) {
  // The base class to use for BEM-style classes.
  $viewBaseClass = 'view-web-snippets';

  $variables['header']['web_snippets_links'] = [
    '#theme'      => 'links',
    '#heading'    => [
      'text'        => t('Web snippet links'),
      'attributes'  => ['class' => ['visually-hidden']]
    ],
    '#links'      => [],
    '#attributes' => ['class' => [$viewBaseClass . '__links']],
    // Give this increased weight so that it's more likely to be at the end of
    // the header.
    '#weight'     => 100,
  ];

  $links = &$variables['header']['web_snippets_links'];

  // Generate the links.
  foreach ([
    // View all tags link.
    'view-all-tags' => [
      'route'  => 'view.tags.page_web_tags',
      'icon'  => 'bookmark_outline',
      'text'  => t('View all tags'),
    ],
    // RSS feed link.
    'feed' => [
      'route'        => 'view.web_snippets.feed',
      'icon'        => 'rss',
      'text'        => t('Subscribe<span class="visually-hidden"> to the Web snippets RSS feed</span>'),
      'titleAttr'   => t('View the Web snippets RSS feed.'),
    ],
  ] as $key => $data) {
    // $links['#links'][$key] = [
    // $links['#links'][
      // $viewBaseClass . '__link ' .
      // $viewBaseClass . '__link--' . $key
    // ] = [
    $links['#links'][$viewBaseClass . '__link--' . $key] = [
      'url'     => \Drupal\Core\Url::fromRoute($data['route']),
      'title'   => [
        '#type'   => 'ambientimpact_icon',
        '#icon'   => $data['icon'],
        '#bundle' => 'core',
        '#text'   => $data['text'],
      ],
      'attributes'  => [
        'title'     => !empty($data['titleAttr']) ? $data['titleAttr'] : '',
      ],
    ];
  }
}

/**
 * Prepares variables for views field templates.
 *
 * Default template: views-view-field.html.twig.
 *
 * This inserts an icon into the row output for taxonomy term names in the
 * 'tags' view. Note that this uses preg_replace() to avoid inserting HTML into
 * a link attribute such as 'title', which is a bit slower than just doing a
 * str_replace().
 *
 * @todo Can this be done in a cleaner fashion elsewhere? E.g. a custom Views
 * plugin?
 */
function ambientimpact_site_preprocess_views_view_field(&$variables) {
  if (
    $variables['view']->id() === 'tags' &&
    !empty($variables['row']->taxonomy_term_field_data_name)
  ) {
    $termName = Html::escape($variables['row']->taxonomy_term_field_data_name);

    $renderArray = [
      '#type'     => 'ambientimpact_icon',
      '#icon'     => 'bookmark_outline',
      '#bundle'   => 'core',
      '#text'     => $termName,
    ];

    // Replace the term name with an icon + text. The icon is rendered by the
    // renderer service without attaching libraries or cache metadata. We must
    // use Markup here so that it gets output as HTML, as a string would be
    // escaped by Drupal's renderer.
    $variables['output'] = Markup::create(preg_replace(
      '/^(<[^>]+>)*(' . $termName . ')/',
      '$1' . \Drupal::service('renderer')->renderPlain($renderArray),
      $variables['output']
    ));
  }
}

/**
 * Prepares variables for page title templates.
 *
 * This wraps the title in a bookmark icon render array if the current path is
 * a taxonomy term with 'tag' in the vocabulary ID.
 *
 * @todo Can we get this data without having to check the current route? For
 * example, can a variable be added for context when the page title is set
 * before it gets to the block?
 *
 * @todo Can this be generalized to wrap in an icon if certain variables are
 * present?
 */
function ambientimpact_site_preprocess_page_title(&$variables) {
  if (
    \Drupal::routeMatch()->getRouteName() ===
      'entity.taxonomy_term.canonical' &&
    !is_null($term = \Drupal\taxonomy\Entity\Term::load(
      \Drupal::routeMatch()->getRawParameter('taxonomy_term')
    )) &&
    strpos($term->getVocabularyId(), 'tag') !== false
  ) {
    $variables['title'] = [
      '#type'     => 'ambientimpact_icon',
      '#icon'     => 'bookmark_outline',
      '#bundle'   => 'core',
      '#text'     => $variables['title'],
    ];
  }
}
