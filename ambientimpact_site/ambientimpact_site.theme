<?php

use Drupal\Component\Utility\Html;
use Drupal\Core\Url;
use Drupal\Core\Render\Markup;
use Drupal\Core\Template\Attribute;
use Symfony\Component\DomCrawler\Crawler;

/**
 * Prepares variables for field_project_link templates.
 *
 * This sets the link text to contain the title of the parent node if the link
 * title has not been set and wraps the text in an icon.
 */
function ambientimpact_site_preprocess_field__field_project_link(
  &$variables, $hook
) {
  foreach ($variables['element']['#items'] as $key => $item) {
    // Determine if a title has been set for this link, using it if so but
    // falling back to the parent node's title.
    if (!empty($item->title)) {
      $title = $item->title;
    } else {
      $title = $variables['element']['#object']->getTitle();
    }

    $text = t(
      'Visit <strong>@title</strong>',
      [
        '@title'  => $title,
      ]
    );

    $variables['items'][$key]['content']['#title'] = [
      '#type'     => 'ambientimpact_icon',
      '#icon'     => 'link',
      '#bundle'   => 'libricons',
      '#text'     => $text,
    ];
  }
}

/**
 * Prepares variables for field_source_link templates.
 *
 * This wraps the text in an icon.
 */
function ambientimpact_site_preprocess_field__field_source_link(
  &$variables, $hook
) {
  foreach ($variables['items'] as $key => &$item) {
    // Don't do anything to an item if the #title is not a string, which could
    // indicate modification by a module that we're not expecting.
    if (gettype($item['content']['#title']) !== 'string') {
      continue;
    }

    $item['content']['#title'] = [
      '#type'     => 'ambientimpact_icon',
      '#icon'     => 'link',
      '#bundle'   => 'libricons',
      '#text'     => $item['content']['#title'],
    ];
  }
}

/**
 * Prepares variables for field_web_tags templates.
 *
 * This wraps the text in an icon.
 */
function ambientimpact_site_preprocess_field__field_web_tags(
  &$variables, $hook
) {
  foreach ($variables['items'] as $key => &$item) {
    // Don't do anything to an item if the #title is not a string, which could
    // indicate modification by a module that we're not expecting.
    if (gettype($item['content']['#title']) !== 'string') {
      continue;
    }

    $item['content']['#title'] = [
      '#type'     => 'ambientimpact_icon',
      '#icon'     => 'bookmark-outline',
      '#bundle'   => 'core',
      '#text'     => $item['content']['#title'],
    ];
  }
}

/**
 * Prepares variables for 'title' field templates.
 *
 * This transliterates titles from various entities (primarily intended for
 * nodes, but others work too) to ASCII-only to avoid characters with accents,
 * as the Furore font does not support those and the browser would fall back to
 * another font, which would look out of place.
 *
 * @see https://api.drupal.org/api/drupal/core%21lib%21Drupal%21Core%21Language%21language.api.php/group/transliteration
 *   Documentation and example of how to transliterate.
 *
 * @todo Can this be moved to a preprocess function targetted only at this
 * field? E.g. ambientimpact_site_preprocess_field__title? That variation
 * doesn't seem to register.
 */
function ambientimpact_site_preprocess_field(&$variables, $hook) {
  if ($variables['field_name'] === 'title') {
    // Get the current language code.
    $langCode = \Drupal::languageManager()->getCurrentLanguage()->getId();

    // Instantiate the transliteration class.
    $transliteration = \Drupal::transliteration();

    foreach ($variables['items'] as $key => &$item) {
      // Don't do anything to an item if the item structure is not what we're
      // expecting, as that could indicate modification by a module that we
      // don't know about.
      if (!isset($item['content']['#context']['value'])) {
        continue;
      }

      $item['content']['#context']['value'] =
        $transliteration->transliterate(
          $item['content']['#context']['value'], $langCode
        );
    }
  }
}

/**
 * Prepares variables for views field templates.
 *
 * Default template: views-view-field.html.twig.
 *
 * This inserts an icon into the row output for taxonomy term names in the
 * 'tags' and 'web_tags' views. Note that this uses preg_replace() to avoid
 * inserting HTML into a link attribute such as 'title', which is a bit slower
 * than just doing a str_replace().
 *
 * @todo Can this be done in a cleaner fashion elsewhere? E.g. a custom Views
 * plugin?
 */
function ambientimpact_site_preprocess_views_view_field(&$variables) {
  if (
    (
      $variables['view']->id() === 'tags' ||
      $variables['view']->id() === 'web_tags'
    ) &&
    !empty($variables['row']->taxonomy_term_field_data_name)
  ) {
    $termName = $variables['row']->taxonomy_term_field_data_name;

    $renderArray = [
      '#type'     => 'ambientimpact_icon',
      '#icon'     => 'bookmark-outline',
      '#bundle'   => 'core',
      '#text'     => $termName,
    ];

    // Replace the term name with the rendered icon + text.
    $markup = preg_replace(
      '/^(<[^>]+>)*(' . preg_quote(Html::escape($termName), '/') . ')/',
      '$1' . \Drupal::service('renderer')->render($renderArray),
      (string) $variables['output']
    );

    $crawler = new Crawler($markup);

    $linkElement = $crawler->filter('body > a')->getNode(0);

    \Drupal::service(
      'plugin.manager.ambientimpact_component'
    )->getComponentInstance('link.image')
      ->processLink($linkElement);

    // Replace the term name with the rendered icon + text. We must use Markup
    // here so that it gets output as HTML, as a string would be escaped by
    // Drupal's renderer.
    $variables['output'] = Markup::create($crawler->filter('body')->html());
  }
}

/**
 * Prepares variables for page title templates.
 *
 * This wraps the title in a bookmark icon render array if the current path is
 * a taxonomy term with 'tag' in the vocabulary ID.
 *
 * @todo Can we get this data without having to check the current route? For
 * example, can a variable be added for context when the page title is set
 * before it gets to the block?
 *
 * @todo Can this be generalized to wrap in an icon if certain variables are
 * present?
 */
function ambientimpact_site_preprocess_page_title(&$variables) {
  if (
    \Drupal::routeMatch()->getRouteName() ===
      'entity.taxonomy_term.canonical' &&
    !is_null($term = \Drupal\taxonomy\Entity\Term::load(
      \Drupal::routeMatch()->getRawParameter('taxonomy_term')
    )) &&
    strpos($term->getVocabularyId(), 'tag') !== false
  ) {
    $variables['title'] = [
      '#type'     => 'ambientimpact_icon',
      '#icon'     => 'bookmark-outline',
      '#bundle'   => 'core',
      '#text'     => $variables['title'],
    ];
  }
}

/**
 * Prepares variables for node templates.
 *
 * This attaches the 'ambientimpact_site/project' library to 'project' nodes.
 */
function ambientimpact_site_preprocess_node(&$variables) {
  if ($variables['node']->getType() === 'project') {
    $variables['#attached']['library'][] = 'ambientimpact_site/project';
  }
}

/**
 * Prepares variables for image caption formatter templates.
 *
 * This moves the 'title' attribute to the image caption if the caption is empty
 * but the title attribute is set. This is for backwards compatibility with the
 * migrated content from Drupal 7.
 *
 * @todo Remove this when title -> caption migration is working.
 */
function ambientimpact_site_preprocess_image_caption_formatter(&$variables) {
  if (empty($variables['caption']) && !empty($variables['image']['#title'])) {
    $variables['caption'] = $variables['image']['#title'];

    $variables['image']['#title'] = '';
  }
}
