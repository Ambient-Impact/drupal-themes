<?php

use Drupal\Component\Utility\Html;
use Drupal\Core\Url;
use Drupal\Component\Render\FormattableMarkup;
use Drupal\Core\Template\Attribute;
use Symfony\Component\DomCrawler\Crawler;
use Drupal\ambientimpact_site\HeadingTextToSvg;

/**
 * Prepares variables for HTML document templates.
 *
 * This attaches the 'ambientimpact_site/services' library to the Services page.
 *
 * @todo Rework this so that we don't have to check the path, but rather attach
 *   this to a specific render array or the filter process result of the node?
 *   Better yet, rework the Services overview as a theme element and its own
 *   route?
 */
function ambientimpact_site_preprocess_html(array &$variables): void {

  $unaliasedPath = \Drupal::service('path.current')->getPath();

  $aliasedPath = \Drupal::service('path_alias.manager')->getAliasByPath(
    $unaliasedPath
  );

  if ($aliasedPath === '/web/services') {
    $variables['#attached']['library'][] = 'ambientimpact_site/services';
  }

}

/**
 * Prepares variables for field_project_link templates.
 *
 * This sets the link text to contain the title of the parent node if the link
 * title has not been set and wraps the text in an icon.
 */
function ambientimpact_site_preprocess_field__field_project_link(
  array &$variables, string $hook
): void {
  foreach ($variables['element']['#items'] as $key => $item) {
    // Determine if a title has been set for this link, using it if so but
    // falling back to the parent node's title.
    if (!empty($item->title)) {
      $title = $item->title;
    } else {
      $title = $variables['element']['#object']->getTitle();
    }

    $text = t(
      'Visit <strong>@title</strong>',
      [
        '@title'  => $title,
      ]
    );

    $variables['items'][$key]['content']['#title'] = [
      '#type'     => 'ambientimpact_icon',
      '#icon'     => 'link',
      '#bundle'   => 'libricons',
      '#text'     => $text,
    ];

    // Replace the no title class with the one indicating there is a title,
    // since we added it programmatically. This overrides
    // ambientimpact_base_preprocess_field().
    $variables['items'][$key]['attributes']
      ->removeClass('field__item--link-no-title')
      ->addClass('field__item--link-has-title');
  }
}

/**
 * Prepares variables for field_source_link templates.
 *
 * This wraps the text in an icon.
 */
function ambientimpact_site_preprocess_field__field_source_link(
  array &$variables, string $hook
): void {
  foreach ($variables['items'] as $key => &$item) {
    // Don't do anything to an item if the #title is not a string, which could
    // indicate modification by a module that we're not expecting.
    if (gettype($item['content']['#title']) !== 'string') {
      continue;
    }

    $item['content']['#title'] = [
      '#type'     => 'ambientimpact_icon',
      '#icon'     => 'link',
      '#bundle'   => 'libricons',
      '#text'     => $item['content']['#title'],
    ];
  }
}

/**
 * Prepares variables for field_web_tags templates.
 *
 * This wraps the text in an icon.
 */
function ambientimpact_site_preprocess_field__field_web_tags(
  array &$variables, string $hook
): void {
  foreach ($variables['items'] as $key => &$item) {
    // Don't do anything to an item if the #title is not a string, which could
    // indicate modification by a module that we're not expecting.
    if (gettype($item['content']['#title']) !== 'string') {
      continue;
    }

    $item['content']['#title'] = [
      '#type'     => 'ambientimpact_icon',
      '#icon'     => 'bookmark-outline',
      '#bundle'   => 'core',
      '#text'     => $item['content']['#title'],
    ];
  }
}

/**
 * Prepares variables for field templates.
 *
 * This transliterates titles from various entities (primarily intended for
 * nodes, but others work too) to ASCII-only to avoid characters with accents,
 * as the Furore font does not support those and the browser would fall back to
 * another font, which would look out of place.
 *
 * This generates SVG elements containing paths of project node titles while
 * preserving the title text for assistive software such as screen readers.
 *
 * This adds a class to entity reference fields indicating the entity type
 * referenced. For example, media entities would be indicated by
 * .field--entity-reference-type-media
 *
 * This limits entity reference fields with a media entity target to two items
 * when displayed in the compact view mode.
 *
 * @see https://api.drupal.org/api/drupal/core%21lib%21Drupal%21Core%21Language%21language.api.php/group/transliteration
 *   Documentation and example of how to transliterate.
 *
 * @see \Drupal\ambientimpact_site\HeadingTextToSvg::generate()
 *   Class and method that generates the title SVGs.
 *
 * @todo Can the 'title' field code be moved to a preprocess function targetted
 *   only at this field? E.g. ambientimpact_site_preprocess_field__title? That
 *   variation doesn't seem to register.
 */
function ambientimpact_site_preprocess_field(
  array &$variables, string $hook
): void {

  if ($variables['field_name'] === 'title') {
    // Get the current language code.
    $langCode = \Drupal::languageManager()->getCurrentLanguage()->getId();

    // Instantiate the transliteration class.
    $transliteration = \Drupal::transliteration();

    foreach ($variables['items'] as $key => &$item) {
      // Don't do anything to an item if the item structure is not what we're
      // expecting, as that could indicate modification by a module that we
      // don't know about.
      if (!isset($item['content']['#context']['value'])) {
        continue;
      }

      $item['content']['#context']['value'] =
        $transliteration->transliterate(
          $item['content']['#context']['value'], $langCode
        );
    }
  }

  // Generate SVG elements of project node titles.
  if (
    $variables['field_name'] === 'title' &&
    $variables['element']['#entity_type'] === 'node' &&
    $variables['element']['#bundle'] === 'project'
  ) {
    $title = $variables['items'][0]['content']['#context']['value'];

    /** @var \Drupal\ambientimpact_site\HeadingTextToSvg $headingTextToSvg */
    $headingTextToSvg = \Drupal::classResolver(HeadingTextToSvg::class);

    $svgAttributes = [
      'class'       => 'field__title-svg',
      // Entirely hidden by default if stylesheets are not applied.
      'style'       => 'display: none;',
      // Hidden from the accessibility tree as it exists for purely visual
      // reasons. The original text is picked up and used in screen readers, for
      // example.
      'aria-hidden' => 'true',
    ];

    // If the text is longer than this many characters, add the wide modifier
    // class so it can be adjusted on smaller screens to remain readable, and
    // attach the scroll proxy library and attributes.
    //
    // @todo Can this value be made configurable/exposed in some way?
    //
    // @todo What about basing this on a width to height ratio rather than
    //   character count?
    if (\mb_strlen($title) > 18) {

      $svgAttributes['class'] .= ' field__title-svg--wide';

      $svgAttributes['data-scroll-proxy-item'] = 'true';

      $svgAttributes['data-scroll-proxy-sentinel-container'] =
        '.node--type-project';

      $variables['items'][0]['content']['#attached']['library'][] =
        'ambientimpact_ux/component.scroll_proxy';

    }

    /** @var \Drupal\ambientimpact_site\TextToSvg */
    $svg = $headingTextToSvg->generate($title, $svgAttributes);

    // Alter the inline_template to wrap the existing text in an element and
    // append the generated SVG markup.
    //
    // @todo Is this the best way to do this, or is there a best practices way?
    $variables['items'][0]['content']['#template'] =
      '<span class="field__title-text">' .
        $variables['items'][0]['content']['#template'] .
      '</span>' . $svg->asHtml();
  }

  // If this is an entity reference field, add a class indicating the entity
  // type it references.
  if ($variables['field_type'] === 'entity_reference') {

    $variables['attributes']['class'][] =
      'field--entity-reference-type-' .
      Html::cleanCssIdentifier($variables['element']['#items']
        ->getFieldDefinition()
        ->getItemDefinition()->getSetting('target_type')
      );

  }

  // Media entity reference fields in compact view mode are limited to
  // displaying two items at maximum.
  if (
    $variables['field_type'] === 'entity_reference' &&
    $variables['element']['#items']->getFieldDefinition()
      ->getItemDefinition()->getSetting('target_type') === 'media' &&
      $variables['element']['#view_mode'] === 'compact' &&
      count($variables['items']) > 2
  ) {
    $variables['items'] = \array_slice($variables['items'], 0, 2);
  }

}

/**
 * Prepares variables for views field templates.
 *
 * Default template: views-view-field.html.twig.
 *
 * This inserts an icon into the row output for taxonomy term names in the
 * 'tags' and 'web_tags' views. Note that this uses preg_replace() to avoid
 * inserting HTML into a link attribute such as 'title', which is a bit slower
 * than just doing a str_replace().
 *
 * @todo Can this be done in a cleaner fashion elsewhere? E.g. a custom Views
 * plugin?
 */
function ambientimpact_site_preprocess_views_view_field(
  array &$variables
): void {
  if (
    (
      $variables['view']->id() === 'tags' ||
      $variables['view']->id() === 'web_tags'
    ) &&
    !empty($variables['row']->taxonomy_term_field_data_name)
  ) {
    $termName = $variables['row']->taxonomy_term_field_data_name;

    $renderArray = [
      '#type'     => 'ambientimpact_icon',
      '#icon'     => 'bookmark-outline',
      '#bundle'   => 'core',
      '#text'     => $termName,
    ];

    // Replace the term name with the rendered icon + text.
    $markup = preg_replace(
      '/^(<[^>]+>)*(' . preg_quote(Html::escape($termName), '/') . ')/',
      '$1' . \Drupal::service('renderer')->render($renderArray),
      (string) $variables['output']
    );

    $crawler = new Crawler($markup);

    $linkElement = $crawler->filter('body > a')->getNode(0);

    \Drupal::service(
      'plugin.manager.ambientimpact_component'
    )->getComponentInstance('link.image')
      ->processLink($linkElement);

    // Replace the term name with the rendered icon + text. We must use a class
    // that implements \Drupal\Component\Render\MarkupInterface here so that it
    // gets output as HTML, as a plain string would be escaped by Drupal's
    // renderer. In this case, \Drupal\Component\Render\FormattableMarkup does
    // the job but \Drupal\Core\StringTranslation\TranslatableMarkup would also
    // work if translation is needed.
    $variables['output'] = new FormattableMarkup(
      $crawler->filter('body')->html(), []
    );
  }
}

/**
 * Prepares variables for page title templates.
 *
 * This wraps the title in a bookmark icon render array if the current path is
 * a taxonomy term with 'tag' in the vocabulary ID.
 *
 * @todo Can we get this data without having to check the current route? For
 * example, can a variable be added for context when the page title is set
 * before it gets to the block?
 *
 * @todo Can this be generalized to wrap in an icon if certain variables are
 * present?
 */
function ambientimpact_site_preprocess_page_title(array &$variables): void {
  if (
    \Drupal::routeMatch()->getRouteName() ===
      'entity.taxonomy_term.canonical' &&
    !is_null($term = \Drupal\taxonomy\Entity\Term::load(
      \Drupal::routeMatch()->getRawParameter('taxonomy_term')
    )) &&
    strpos($term->bundle(), 'tag') !== false
  ) {
    $variables['title'] = [
      '#type'     => 'ambientimpact_icon',
      '#icon'     => 'bookmark-outline',
      '#bundle'   => 'core',
      '#text'     => $variables['title'],
    ];
  }
}

/**
 * Prepares variables for maintenance page templates.
 *
 * This removes $variables['logo'] because we don't actually have a logo but
 * Drupal still tries to output an <img> element regardless which points to a
 * non-existent file.
 *
 * @see \template_preprocess_maintenance_page()
 */
function ambientimpact_site_preprocess_maintenance_page(
  array &$variables
): void {
  unset($variables['logo']);
}

/**
 * Prepares variables for image caption formatter templates.
 *
 * This moves the 'title' attribute to the image caption if the caption is empty
 * but the title attribute is set. This is for backwards compatibility with the
 * migrated content from Drupal 7.
 *
 * @todo Remove this when title -> caption migration is working.
 */
function ambientimpact_site_preprocess_image_caption_formatter(
  array &$variables
): void {
  if (empty($variables['caption']) && !empty($variables['image']['#title'])) {
    $variables['caption'] = $variables['image']['#title'];

    $variables['image']['#title'] = '';
  }
}

/**
 * Prepares variables for menu templates.
 *
 * This attaches our primary menu library to the 'main' menu.
 */
function ambientimpact_site_preprocess_menu(array &$variables): void {

  if ($variables['menu_name'] === 'main') {
    $variables['#attached']['library'][] = 'ambientimpact_site/menu_primary';
  }

}
