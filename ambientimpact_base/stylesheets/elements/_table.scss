// -----------------------------------------------------------------------------
//   Base table partial
// -----------------------------------------------------------------------------

@use '../global/content';
@use '../global/layout.vertical_spacing' as vertical-spacing;
@use 'material.common/material.general' as material-general;
@use 'sass:color';
@use 'sass/helpers/colour';
@use 'sass/helpers/selector';

///
/// <table> element background colour on light backgrounds.
///
$background-colour-on-light: color.mix(
  colour.$foreground-colour-on-light, colour.$background-colour-light, 10%
) !default;

///
/// <thead> element background colour on light backgrounds.
///
$header-background-colour-on-light: hsla(0, 0%, 0%, 0.05) !default;

///
/// <thead> element background colour on dark backgrounds.
///
$header-background-colour-on-dark: hsla(0, 0%, 100%, 0.05) !default;

///
/// <table> element background colour on dark backgrounds.
///
$background-colour-on-dark: color.mix(
  colour.$foreground-colour-on-dark, colour.$background-colour-dark, 10%
) !default;

///
/// Table cell border width.
///
$cell-border-width: 2px !default;

///
/// Table cell border style.
///
$cell-border-style: solid !default;

///
/// Table cell border colour on light backgrounds.
///
$cell-border-colour-on-light: hsla(0, 0%, 100%, 0.6) !default;

///
/// Table cell border colour on dark backgrounds.
///
$cell-border-colour-on-dark: hsla(0, 0%, 100%, 0.1) !default;

///
/// <table> element border radius.
///
$border-radius: material-general.$border-radius !default;

:root {
  --table-cell-padding-vertical:        0.3em;
  --table-cell-padding-horizontal:      0.7em;
  // If you don't use borders between cells, this custom property can be set to
  // a slightly larger value to increase the left and right padding for cells at
  // the left and right edges respectively.
  --table-cell-padding-horizontal-edge: var(--table-cell-padding-horizontal);

  --table-cell-border-width:            #{$cell-border-width};
  --table-cell-border-style:            #{$cell-border-style};
  --table-cell-border-colour:           #{$cell-border-colour-on-light};

  @include colour.on-dark-colour-scheme {
    --table-cell-border-colour:        #{$cell-border-colour-on-dark};
  }

  --table-border-radius: #{$border-radius};
}

table {

  // CSS-only responsive tables loosely based on this CodePen by David Bushell.
  //
  // @link https://codepen.io/dbushell/pen/wGaamR

  // If max-content is not supported as a max-width value, display as
  // inline-block as displaying as a table does not allow overflow scrolling.
  // Using inline-block allows the table to mimic max-content and not be wider
  // than it needs to be.
  display: inline-block;

  // If the browser supports using max-content as a max-width value, display
  // as block to avoid using the inline box model.
  //
  // @link https://caniuse.com/mdn-css_properties_width_max-content
  //
  // @link https://developer.mozilla.org/en-US/docs/Web/CSS/max-content
  @supports (max-width: max-content) {
    display: block;
  }

  // Scroll horizontally rather than overflowing the container.
  overflow-x: auto;

  // If the browser supports max-content as a value, set the max-width so that
  // the table may be centred horizontally if needed.
  max-width: max-content;

  @at-root {
    @include vertical-spacing.against-previous(
      &,
      $spacing-small: content.$item-vertical-spacing-small,
      $spacing-large: content.$item-vertical-spacing-large
    );
  }

  @include colour.set-colours(
    $background: $background-colour-on-light
  );

  @include colour.on-dark-colour-scheme {
    @include colour.set-colours(
      $background: $background-colour-on-dark
    );
  }

  border-radius: var(--table-border-radius);
}

thead {
  @include colour.set-colours(
    $background:            $header-background-colour-on-light,
    $background-reference:  $background-colour-on-light
  );

  @include colour.on-dark-colour-scheme {
    @include colour.set-colours(
      $background:            $header-background-colour-on-dark,
      $background-reference:  $background-colour-on-dark
    );
  }
}

thead + tbody tr:first-child,
tr + tr {
  border-top:
    var(--table-cell-border-width)
    var(--table-cell-border-style)
    var(--table-cell-border-colour);
}

td, th {
  padding:
    var(--table-cell-padding-vertical) var(--table-cell-padding-horizontal);

  border-left:
    var(--table-cell-border-width)
    var(--table-cell-border-style)
    var(--table-cell-border-colour);
  border-right:
    var(--table-cell-border-width)
    var(--table-cell-border-style)
    var(--table-cell-border-colour);

  @include selector.root-conditions(('[dir=ltr]'), 'html') {
    &:first-child {
      padding-left: var(--table-cell-padding-horizontal-edge);

      border-left-width: 0;
    }
    &:last-child {
      padding-right: var(--table-cell-padding-horizontal-edge);

      border-right-width: 0;
    }
  }
  @include selector.root-conditions(('[dir=rtl]'), 'html') {
    &:first-child {
      padding-right: var(--table-cell-padding-horizontal-edge);

      border-right-width: 0;
    }
    &:last-child {
      padding-left: var(--table-cell-padding-horizontal-edge);

      border-left-width: 0;
    }
  }

  // These data attributes can be applied to ensure a given column does not get
  // too narrow where text can be hard to read, e.g. on narrow screens/mobile.
  &[data-table-column-width='long'] {
    min-width: 15em;
  }
  &[data-table-column-width='medium'] {
    min-width: 10em;
  }
  &[data-table-column-width='small'] {
    min-width: 5em;
  }

}
