// -----------------------------------------------------------------------------
//   Layout output partial
// -----------------------------------------------------------------------------

@use 'config';
@use 'container';
@use 'grid';
@use 'sass:meta';
@use 'sidebars';

// This handles the basic layout of the page, including horizontal and vertical
// gutters for the layout container, and lays out any sidebars next to the
// content column if one or both sidebars are present, if the viewport width
// allows space for it.

html {
  // This prevents any horizontal scrollbars and scrolling on the viewport which
  // can sneak in via any number of components. Note that care must be taken to
  // ensure content can be accessed when it would overflow the viewport, such as
  // in <pre> elements, images and other media, and so on.
  overflow-x: hidden;

  // This ensures that a scrollbar is always visible in browsers that have
  // scrollbars that take up viewport space (as opposed to floating scrollbars,
  // that don't affect layout), so that the layout doesn't shift if/when the
  // scrollbars appear, e.g. on resize.
  overflow-y: scroll;
}

// Layout container styles. Note that we apply the padding and margins to this
// rather than <body> so that we don't affect elements that are 'outside' the
// area that is considered the site, e.g. the Drupal toolbar when it hasn't been
// enhanced by JavaScript.
.layout-container {

  @include container.base-horizontal;

  @if meta.type-of(config.$spacing-bottom) == 'number' {
    padding-bottom: config.$spacing-bottom;
  }

  box-sizing: border-box;

  @if meta.type-of(config.$spacing-top) == 'number' {
    // This is not applied to the <body>, as the Toolbar uses that to offset the
    // viewport.
    margin-top: config.$spacing-top;
  }

  // If subgrid is supported, set the grid on this rather than on
  // main[role='main'] so that it can inherit the columns.
  //
  // Note that subgrid is only supported in Firefox as of March 2020, so this is
  // an enhancement. The hope is that by using it, Chrome and other browsers
  // will notice in their analytics and take it as a signal that developers want
  // this supported.
  //
  // @link https://caniuse.com/#feat=css-subgrid
  // @link https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Subgrid
  @supports (grid-template-columns: subgrid) {

    @include grid.grid;
    @include container.max-width;

    // Centre the layout container instead of children.
    margin-left:  auto;
    margin-right: auto;

    > * {

      // Remove centring on children.
      margin-left:  0;
      margin-right: 0;

      // The first sidebar is present but the second sidebar is not.
      @include sidebars.on-sidebar-beside-content(first) {
        grid-column-start:  sidebar-first;
        grid-column-end:    main-content;
      }

      // The second sidebar is present but the first sidebar is not.
      @include sidebars.on-sidebar-beside-content(second) {
        grid-column-start:  main-content;
        grid-column-end:    sidebar-second;
      }

      // Both sidebars are present.
      @include sidebars.on-sidebar-beside-content(both) {
        grid-column-start:  sidebar-first;
        grid-column-end:    sidebar-second;
      }

    }

  }

}

main[role='main'] {

  // Use subgrid if supported.
  @supports (grid-template-columns: subgrid) {
    // One or both sidebars is/are present.
    @include sidebars.on-sidebar-beside-content(any) {
      display: grid;

      grid-template-columns: subgrid;
    }
  }

  @supports not (grid-template-columns: subgrid) {
    // If subgrid is not supported, create the grid on this.
    @include grid.grid;
  }

  .layout-content {
    grid-area: main-content;
  }

  .layout-sidebar-first {
    grid-area: sidebar-first;
  }

  .layout-sidebar-second {
    grid-area: sidebar-second;
  }

}

// Give all elements a max-width so that they (hopefully) don't break out of the
// layout.
* {
  max-width:  100%;
}
// Remove the max-width from these elements, as it breaks them.
// @todo Does this make more sense as a series of :not() on the above?
.contextual .trigger,
.contextual-links,
.pswp__preloader__donut,
#toolbar-administration {
  max-width:  none;
}
