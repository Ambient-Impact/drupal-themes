// -----------------------------------------------------------------------------
//   Vertical spacing layout partial
// -----------------------------------------------------------------------------

@use 'sass/helpers/breakpoint';
@use 'sass:selector';
@use 'sass/variables/general';

///
/// Generic vertical spacing between elements when on larger screens.
///
/// @see $spacing-breakpoint
///   The breakpoint that determines when this is used.
///
$spacing-large: general.$general-spacing * 5 !default;

///
/// Generic vertical spacing between elements when on smaller screens.
///
/// @see $spacing-breakpoint
///   The breakpoint that determines when this is used.
///
$spacing-small: general.$general-spacing * 2.5 !default;

///
/// Generic element vertical spacing breakpoint.
///
/// This is the size at which we go from small spacing to large. Note that this
/// is the viewport width rather than height to avoid unnecessarily shifting
/// layout in browsers that have panels that slide in and out of view, changing
/// the viewport height - this is most common in mobile browsers.
///
$spacing-breakpoint: '>=30em' !default;

///
/// Elements ignored when applying generic vertical spacing.
///
/// Elements in this list are assumed to not take up visual space.
///
/// @see {Mixin} against-previous
///   Used in this mixin.
///
$ignore-elements: '.hidden', '.visually-hidden',
  '[hidden]', '[data-contextual-id]', 'script', 'style' !default;

///
/// Apply generic vertical spacing with a breakpoint.
///
/// @param {String} $property [margin-top]
///   The property to set the spacing to.
///
/// @param {Number} $spacing-small [$spacing-small]
///   The small screen spacing value to use.
///
/// @param {Number} $spacing-large [$spacing-large]
///   The large screen spacing value to use.
///
/// @param {String} $breakpoint [$spacing-breakpoint]
///   The breakpoint at which to switch between the small and large spacing.
///
/// @require $spacing-large
/// @require $spacing-small
/// @require $spacing-breakpoint
///
@mixin vertical-spacing(
  $property:      margin-top,
  $spacing-small: $spacing-small,
  $spacing-large: $spacing-large,
  $breakpoint:    $spacing-breakpoint
) {
  #{$property}: $spacing-small;

  // If the small and large spacing are the same, don't bother with the
  // breakpoint.
  @if $spacing-small != $spacing-large {
    @include breakpoint.on($breakpoint) {
      #{$property}: $spacing-large;
    }
  }
}

///
/// Apply generic vertical spacing to elements with preceding (valid) siblings.
///
/// Because of the way this mixin builds selectors, you need to apply this to
/// the element's parent, or if there is none, wrap this call in an @at-root {}.
///
/// @example scss - Basic usage with a parent selector
///   .descendent .parent {
///     @include against-previous('.target');
///   }
///
/// @example scss - Basic usage without a parent selector
///   @at-root {
///     @include against-previous('.target');
///   }
///
/// @param {String} $target-selector
///   The selector to apply spacing to. This is required. Currently only
///   supports a single selector - passing a comma-separated list will result in
///   unexpected results.
///
/// @param {String} $previous-qualifier ['']
///   The an optional selector to include in the previous element selectors.
///
/// @param {List} $ignore-elements [$ignore-elements]
///   A list of element selectors to ignore when looking for previous siblings;
///   these are treated as if they don't exist.
///
/// @param {String} $property [margin-top]
///   The property to set the spacing to.
///
/// @param {Number} $spacing-small [$spacing-small]
///   The small screen spacing value to use.
///
/// @param {Number} $spacing-large [$spacing-large]
///   The large screen spacing value to use.
///
/// @param {String} $breakpoint [$spacing-breakpoint]
///   The breakpoint at which to switch between the small and large spacing.
///
/// @require $spacing-large
/// @require $spacing-small
/// @require $spacing-breakpoint
/// @require $ignore-elements
/// @require {Mixin} vertical-spacing
///
/// @todo Switch over to the
/// [:is() pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/:is)
/// when all major browsers/layout engines support it to simplify the selectors.
///
@mixin against-previous(
  $target-selector,
  $previous-qualifier:  '',
  $ignore-elements:     $ignore-elements,
  $property:            margin-top,
  $spacing-small:       $spacing-small,
  $spacing-large:       $spacing-large,
  $breakpoint:          $spacing-breakpoint
) {
  $not: '';

  // Build the selector used to ignore preceding elements based on
  // $ignore-elements.
  @each $selector in $ignore-elements {
    $not: '#{$not}:not(#{$selector})';
  }

  // This starts as a list containing just the placeholder, which we build on.
  $ignore: ('.vertical-spacing-placeholder',);

  // Build the selector structure that skips over ignored elements from
  // $ignore-elements. Note that the .vertical-spacing-placeholder class is a
  // placeholder.
  @each $selector in $ignore-elements {
    $ignore: '#{$ignore}, .vertical-spacing-placeholder + #{$selector}';
  }

  // This uses the built-in Sass selector.replace() to dynamically replace the
  // placeholder with the ignored element selector, which expands the selector
  // much like @extend works.
  //
  // @see https://sass-lang.com/documentation/modules/selector#replace
  $previous-selector: selector.replace(
    $ignore, '.vertical-spacing-placeholder', $not + $previous-qualifier
  );

  // Use Sass' selector nesting to join the previous element selector and the
  // target selector together.
  #{$previous-selector} {
    & + #{$target-selector} {
      @include vertical-spacing(
        $property:      $property,
        $spacing-small: $spacing-small,
        $spacing-large: $spacing-large,
        $breakpoint:    $breakpoint
      );
    }
  }
}
