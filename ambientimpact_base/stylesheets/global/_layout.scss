// -----------------------------------------------------------------------------
//   Base layout partial
// -----------------------------------------------------------------------------

///
/// This is the spacing added on the left and right of the viewport.
///
$layout-gutter: $general-spacing !default;

///
/// The space between the top of the viewport and the layout container.
///
$layout-top-spacing: $general-spacing * 1.5 !default;

///
/// The space between the bottom of the viewport and the layout container.
///
$layout-bottom-spacing: $general-spacing * 8 !default;

///
/// The maximum width of the site layout container.
///
/// Note that $layout-gutter is added to this on either side. This default value
/// is optimal for a single column layout, but may need to be increased if
/// sidebars or other columns are needed.
///
$layout-max-width: 45em !default;

///
/// Generic vertical spacing between elements when on larger screens.
///
/// @see $vertical-spacing-breakpoint
///   The breakpoint that determines when this is used.
///
$vertical-spacing-large: $general-spacing * 5 !default;

///
/// Generic vertical spacing between elements when on smaller screens.
///
/// @see $vertical-spacing-breakpoint
///   The breakpoint that determines when this is used.
///
$vertical-spacing-small: $general-spacing * 2.5 !default;

///
/// Generic element vertical spacing breakpoint.
///
/// This is the size at which we go from small spacing to large. Note that this
/// is the viewport width rather than height to avoid unnecessarily shifting
/// layout in browsers that have panels that slide in and out of view, changing
/// the viewport height - this is most common in mobile browsers.
///
$vertical-spacing-breakpoint: '>=30em' !default;

///
/// Apply generic vertical spacing with a breakpoint.
///
/// @param {String} $property [margin-top]
///   The property to set the spacing to.
///
/// @param {Number} $spacing-small [$vertical-spacing-small]
///   The small screen spacing value to use.
///
/// @param {Number} $spacing-large [$vertical-spacing-large]
///   The large screen spacing value to use.
///
/// @param {String} $breakpoint [$vertical-spacing-breakpoint]
///   The breakpoint at which to switch between the small and large spacing.
///
/// @require $vertical-spacing-large
/// @require $vertical-spacing-small
/// @require $vertical-spacing-breakpoint
///
@mixin vertical-spacing(
  $property:      margin-top,
  $spacing-small: $vertical-spacing-small,
  $spacing-large: $vertical-spacing-large,
  $breakpoint:    $vertical-spacing-breakpoint
) {
  #{$property}: $spacing-small;

  @include media($breakpoint) {
    #{$property}: $spacing-large;
  }
}

html {
  // This prevents any horizontal scrollbars and scrolling on the viewport which
  // can sneak in via any number of components. Note that care must be taken to
  // ensure content can be accessed when it would overflow the viewport, such as
  // in <pre> elements, images and other media, and so on.
  overflow-x: hidden;

  // This ensures that a scrollbar is always visible in browsers that have
  // scrollbars that take up viewport space (as opposed to floating scrollbars,
  // that don't affect layout), so that the layout doesn't shift if/when the
  // scrollbars appear, e.g. on resize.
  overflow-y: scroll;
}

// Layout container styles. Note that we apply the padding and margins to this
// rather than <body> so that we don't affect elements that are 'outside' the
// area that is considered the site, e.g. the Drupal toolbar when it hasn't been
// enhanced by JavaScript.
.layout-container {
  padding-left:   $layout-gutter;
  padding-right:  $layout-gutter;

  @if type-of($layout-bottom-spacing) == 'number' {
    padding-bottom: $layout-bottom-spacing;
  }

  box-sizing:   border-box;

  @if type-of($layout-top-spacing) == 'number' {
    // This is not applied to the <body>, as the Toolbar uses that to offset the
    // viewport.
    margin-top:   $layout-top-spacing;
  }

  // All direct children are width-constrained and centred horizontally.
  // @todo Should we apply a BEM-style class to these elements so that we don't
  // have to use this selector, e.g. .layout-container__item?
  > * {
    max-width:    $layout-max-width;
    margin-left:  auto;
    margin-right: auto;
  }
}

// Give all elements a max-width so that they (hopefully) don't break out of the
// layout.
* {
  max-width:  100%;
}
// Remove the max-width from these elements, as it breaks them.
.contextual .trigger,
.contextual-links,
.pswp__preloader__donut {
  max-width:  none;
}
