// -----------------------------------------------------------------------------
//   Base layout partial
// -----------------------------------------------------------------------------

// This handles the basic layout of the page, including horizontal and vertical
// gutters for the layout container, and lays out any sidebars next to the
// content column if one or both sidebars are present, if the viewport width
// allows space for it.
//
// @see https://caniuse.com/#feat=css-grid
//   We use CSS Grid for layout, which is fairly well supported at the time of
//   writing (November 2019), but note that older browsers don't support it and
//   will fall back to vertically stacking the content and sidebars, in that
//   order.

///
/// This is the spacing added on the left and right of the layout container.
///
$layout-gutter: $general-spacing / 2 !default;

///
/// The space between the top of the viewport and the layout container.
///
$layout-top-spacing: $general-spacing * 1.5 !default;

///
/// The space between the bottom of the viewport and the layout container.
///
$layout-bottom-spacing: $general-spacing * 8 !default;

///
/// The maximum width of the site layout when no sidebars are present.
///
/// Note that $layout-gutter is added to this on either side. This default value
/// is optimal for a single column layout, but may need to be increased if
/// sidebars or other columns are needed.
///
$layout-no-sidebars-max-width: 45em !default;

///
/// The minimum width of the layout to display both sidebars beside content.
///
/// Note that this should not include the $layout-gutter as that's added on top
/// of this value.
///
$layout-with-both-sidebars-min-width: 42em !default;

///
/// The maximum width of the site layout when both sidebars are present.
///
$layout-with-both-sidebars-max-width: 70em !default;

///
/// The minimum width of the layout to display one sidebar beside content.
///
/// Note that this should not include the $layout-gutter as that's added on top
/// of this value.
///
$layout-with-one-sidebar-min-width: 38em !default;

///
/// The maximum width of the site layout when one sidebar is present.
///
/// This is calculated as the midway point between $layout-no-sidebars-max-width
/// and $layout-with-both-sidebars-max-width.
///
$layout-with-one-sidebar-max-width: $layout-no-sidebars-max-width +
  ($layout-with-both-sidebars-max-width - $layout-no-sidebars-max-width) / 2
  !default;

///
/// The content column width, as a grid-template-columns value.
///
/// Note that this needs to use a minmax() so that any tables in the content
/// column with data-table-column-width attributes (which set a min-width) do
/// not break the layout. No idea why this works.
///
/// @link https://developer.mozilla.org/en-US/docs/Web/CSS/grid-template-columns
///   Lists valid values.
///
$layout-content-column-width: minmax(20em, 1fr) !default;

///
/// The sidebar column widths, as a grid-template-columns value.
///
/// @link https://developer.mozilla.org/en-US/docs/Web/CSS/grid-template-columns
///   Lists valid values.
///
$layout-sidebar-column-width: minmax(8em, 12em) !default;

///
/// The gap between layout columns.
///
$layout-gap: $general-spacing !default;

@include add-breakpoints((
  // The minimum width to display sidebar beside the content column when one
  // sidebar is present.
  'layout-with-one-sidebar':  $layout-gutter * 2 +
    $layout-with-one-sidebar-min-width,

  // The minimum width to display sidebars beside the content column when both
  // sidebars are present.
  'layout-with-both-sidebars': $layout-gutter * 2 +
    $layout-with-both-sidebars-min-width,
));

///
/// Apply styles when one or more sidebars are present in the markup.
///
/// @param {String} $sidebar
///   The sidebar condition to match. Must be one of:
///
///   - first: Only the first sidebar is present
///
///   - second: Only the second sidebar is present
///
///   - one: Only one sidebar is present, either the first or second
///
///   - both: Both sidebars are present
///
///   - any: At least one sidebar is present
///
/// @content
///   The content to apply based on the $sidebar parameter.
///
/// @require {mixin} root-conditions
///
@mixin on-sidebar($sidebar) {
  // Only the first sidebar.
  @if ($sidebar == first) {
    @include root-conditions(
      '.has-sidebar-first:not(.has-sidebar-second)', 'body'
    ) {
      @content;
    }

  // Only the second sidebar.
  } @else if ($sidebar == second) {
    @include root-conditions(
      '.has-sidebar-second:not(.has-sidebar-first)', 'body'
    ) {
      @content;
    }

  // Only if one sidebar is present, regardless of which it is.
  } @else if ($sidebar == one) {
    @include root-conditions((
      '.has-sidebar-first:not(.has-sidebar-second)',
      '.has-sidebar-second:not(.has-sidebar-first)',
    ), 'body') {
      @content;
    }

  // Only if both sidebars.
  } @else if ($sidebar == both) {
    @include root-conditions('.has-both-sidebars', 'body') {
      @content;
    }

  // Any other value is treated as 'any', which will match one or both sidebars
  // being present.
  } @else {
    @include root-conditions((
      '.has-sidebar-first:not(.has-sidebar-second)',
      '.has-sidebar-second:not(.has-sidebar-first)',
      '.has-both-sidebars',
    ), 'body') {
      @content;
    }
  }
}

///
/// Apply styles when one or more sidebars are placed beside the content column.
///
/// @param {String} $sidebar
///   The sidebar condition to match. Must be one of:
///
///   - first: Only the first sidebar is present
///
///   - second: Only the second sidebar is present
///
///   - one: Only one sidebar is present, either the first or second
///
///   - both: Both sidebars are present
///
///   - any: At least one sidebar is present
///
/// @content
///   The content to apply based on the $sidebar parameter.
///
/// @require {mixin} on-sidebar
/// @require {mixin} root-conditions
/// @require {mixin} media
///
@mixin on-sidebar-beside-content($sidebar) {
  @if ($sidebar == both) {
    @include media('>=layout-with-both-sidebars') {
      @include on-sidebar($sidebar) {
        @content;
      };
    }

  // 'any' is requires special handling because we need to apply the provided
  // styles with the appropriate media query, but we can't simply just wrap it
  // all in the '>=layout-with-one-sidebar' query because that would erroneously
  // match when both sidebars are present in the markup but before the viewport
  // is wide enough to actually display them next to the content. In this case,
  // we duplicate the styles, one for a single sidebar and one both sidebars at
  // their respective media queries.
  } @else if ($sidebar == any) {
    @include media('>=layout-with-one-sidebar') {
      @include on-sidebar(one) {
        @content;
      };
    }
    @include media('>=layout-with-both-sidebars') {
      @include on-sidebar(both) {
        @content;
      };
    }

  // Any other value is assumed to be one of 'first', 'second', or 'one', all of
  // which fall under the one sidebar media query.
  } @else {
    @include media('>=layout-with-one-sidebar') {
      @include on-sidebar($sidebar) {
        @content;
      };
    }
  }
}

///
/// The maximum width for a container based on whether sidebars are present.
///
/// @require {mixin} on-sidebar
/// @require {mixin} use-grid
///
@mixin layout-max-width {
  max-width: $layout-no-sidebars-max-width;

  @include use-grid {
    @include on-sidebar(one) {
      max-width: $layout-with-one-sidebar-max-width;
    }
    @include on-sidebar(both) {
      max-width: $layout-with-both-sidebars-max-width;
    }
  }
}

///
/// Base layout container horizontal styles.
///
/// This primarily sets the horizontal gutter, max-width of content, and centres
/// content inside the layout container.
///
/// @require {mixin} layout-max-width
/// @require {variable} $layout-gutter
///
@mixin layout-container-base-horizontal {
  padding-left:   $layout-gutter;
  padding-right:  $layout-gutter;

  // All direct children are width-constrained and centred horizontally.
  > * {
    @include layout-max-width;

    margin-left:  auto;
    margin-right: auto;
  }
}

///
/// Layout grid.
///
/// This sets the various grid properties depending on which sidebars are
/// present and at the appropriate viewport widths.
///
/// @content
///   Any additional styles to add at the end of the use-grid block.
///
/// @require {mixin} use-grid
/// @require {mixin} on-sidebar-beside-content
/// @require {variable} $layout-gap
/// @require {variable} $layout-sidebar-column-width
/// @require {variable} $layout-content-column-width
///
@mixin layout-grid {
  @include use-grid {
    // One or both sidebars is/are present.
    @include on-sidebar-beside-content(any) {
      display: grid;

      grid-gap: $layout-gap;
    }

    // The first sidebar is present but the second sidebar is not.
    @include on-sidebar-beside-content(first) {
      grid-template-areas: 'sidebar-first main-content';

      grid-template-columns:
        $layout-sidebar-column-width
        $layout-content-column-width;
    }

    // The second sidebar is present but the first sidebar is not.
    @include on-sidebar-beside-content(second) {
      grid-template-areas: 'main-content sidebar-second';

      grid-template-columns:
        $layout-content-column-width
        $layout-sidebar-column-width;
    }

    // Both sidebars are present.
    @include on-sidebar-beside-content(both) {
      grid-template-areas: 'sidebar-first main-content sidebar-second';

      grid-template-columns:
        $layout-sidebar-column-width
        $layout-content-column-width
        $layout-sidebar-column-width;
    }

    @content;
  } // end @include use-grid
}

html {
  // This prevents any horizontal scrollbars and scrolling on the viewport which
  // can sneak in via any number of components. Note that care must be taken to
  // ensure content can be accessed when it would overflow the viewport, such as
  // in <pre> elements, images and other media, and so on.
  overflow-x: hidden;

  // This ensures that a scrollbar is always visible in browsers that have
  // scrollbars that take up viewport space (as opposed to floating scrollbars,
  // that don't affect layout), so that the layout doesn't shift if/when the
  // scrollbars appear, e.g. on resize.
  overflow-y: scroll;
}

// Layout container styles. Note that we apply the padding and margins to this
// rather than <body> so that we don't affect elements that are 'outside' the
// area that is considered the site, e.g. the Drupal toolbar when it hasn't been
// enhanced by JavaScript.
.layout-container {
  @include layout-container-base-horizontal;

  @if type-of($layout-bottom-spacing) == 'number' {
    padding-bottom: $layout-bottom-spacing;
  }

  box-sizing:   border-box;

  @if type-of($layout-top-spacing) == 'number' {
    // This is not applied to the <body>, as the Toolbar uses that to offset the
    // viewport.
    margin-top:   $layout-top-spacing;
  }

  // If subgrid is supported, set the grid on this rather than on
  // main[role='main'] so that it can inherit the columns.
  //
  // Note that subgrid is only supported in Firefox as of March 2020, so this is
  // an enhancement. The hope is that by using it, Chrome and other browsers
  // will notice in their analytics and take it as a signal that developers want
  // this supported.
  //
  // @link https://caniuse.com/#feat=css-subgrid
  // @link https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Subgrid
  @supports (grid-template-columns: subgrid) {
    @include layout-grid;
    @include layout-max-width;

    // Centre the layout container instead of children.
    margin-left:  auto;
    margin-right: auto;

    > * {
      // Remove centring on children.
      margin-left:  0;
      margin-right: 0;

      // The first sidebar is present but the second sidebar is not.
      @include on-sidebar-beside-content(first) {
        grid-column-start:  sidebar-first;
        grid-column-end:    main-content;
      }

      // The second sidebar is present but the first sidebar is not.
      @include on-sidebar-beside-content(second) {
        grid-column-start:  main-content;
        grid-column-end:    sidebar-second;
      }

      // Both sidebars are present.
      @include on-sidebar-beside-content(both) {
        grid-column-start:  sidebar-first;
        grid-column-end:    sidebar-second;
      }
    }
  }
}

main[role='main'] {
  // Use subgrid if supported.
  @supports (grid-template-columns: subgrid) {
    // One or both sidebars is/are present.
    @include on-sidebar-beside-content(any) {
      display: grid;

      grid-template-columns: subgrid;
    }
  }

  @supports not (grid-template-columns: subgrid) {
    // If subgrid is not supported, create the grid on this.
    @include layout-grid;
  }

  .layout-content {
    grid-area: main-content;
  }

  .layout-sidebar-first {
    grid-area: sidebar-first;
  }

  .layout-sidebar-second {
    grid-area: sidebar-second;
  }
}

// Give all elements a max-width so that they (hopefully) don't break out of the
// layout.
* {
  max-width:  100%;
}
// Remove the max-width from these elements, as it breaks them.
// @todo Does this make more sense as a series of :not() on the above?
.contextual .trigger,
.contextual-links,
.pswp__preloader__donut,
#toolbar-administration {
  max-width:  none;
}
