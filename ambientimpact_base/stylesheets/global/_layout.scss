// -----------------------------------------------------------------------------
//   Base layout partial
// -----------------------------------------------------------------------------

///
/// This is the spacing added on the left and right of the viewport.
///
$layout-gutter: $general-spacing / 2 !default;

///
/// The space between the top of the viewport and the layout container.
///
$layout-top-spacing: $general-spacing * 1.5 !default;

///
/// The space between the bottom of the viewport and the layout container.
///
$layout-bottom-spacing: $general-spacing * 8 !default;

///
/// The maximum width of the site layout container.
///
/// Note that $layout-gutter is added to this on either side. This default value
/// is optimal for a single column layout, but may need to be increased if
/// sidebars or other columns are needed.
///
$layout-max-width: 45em !default;

///
/// Base layout container horizontal styles.
///
/// This primarily sets the horizontal gutter, max-width of content, and centres
/// content inside the layout container.
///
@mixin layout-container-base-horizontal {
  padding-left:   $layout-gutter;
  padding-right:  $layout-gutter;

  // All direct children are width-constrained and centred horizontally.
  > * {
    max-width:    $layout-max-width;
    margin-left:  auto;
    margin-right: auto;
  }
}

html {
  // This prevents any horizontal scrollbars and scrolling on the viewport which
  // can sneak in via any number of components. Note that care must be taken to
  // ensure content can be accessed when it would overflow the viewport, such as
  // in <pre> elements, images and other media, and so on.
  overflow-x: hidden;

  // This ensures that a scrollbar is always visible in browsers that have
  // scrollbars that take up viewport space (as opposed to floating scrollbars,
  // that don't affect layout), so that the layout doesn't shift if/when the
  // scrollbars appear, e.g. on resize.
  overflow-y: scroll;
}

// Layout container styles. Note that we apply the padding and margins to this
// rather than <body> so that we don't affect elements that are 'outside' the
// area that is considered the site, e.g. the Drupal toolbar when it hasn't been
// enhanced by JavaScript.
.layout-container {
  @include layout-container-base-horizontal;

  @if type-of($layout-bottom-spacing) == 'number' {
    padding-bottom: $layout-bottom-spacing;
  }

  box-sizing:   border-box;

  @if type-of($layout-top-spacing) == 'number' {
    // This is not applied to the <body>, as the Toolbar uses that to offset the
    // viewport.
    margin-top:   $layout-top-spacing;
  }
}

// Give all elements a max-width so that they (hopefully) don't break out of the
// layout.
* {
  max-width:  100%;
}
// Remove the max-width from these elements, as it breaks them.
// @todo Does this make more sense as a series of :not() on the above?
.contextual .trigger,
.contextual-links,
.pswp__preloader__donut,
#toolbar-administration {
  max-width:  none;
}
