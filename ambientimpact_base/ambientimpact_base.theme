<?php

use Drupal\Core\Template\Attribute;
use Drupal\Core\Url;

/**
 * Implements hook_element_info_alter().
 *
 * This attaches the textarea component to textareas.
 *
 * This attaches the Material input component to text input types.
 */
function ambientimpact_base_element_info_alter(array &$info) {
  if (isset($info['textarea'])) {
    $info['textarea']['#attached']['library'][] =
      'ambientimpact_ux/component.textarea';
  }

  foreach ([
    // Standard single-line text field.
   'textfield',

    // Standard multi-line textarea.
    'textarea',

    // Password fields.
    'password',
    'password_confirm',

    // HTML5 fields.
    'email',
    'search',
    'tel',
    'url',
    'number',
  ] as $elementName) {
    if (isset($info[$elementName])) {
      $info[$elementName]['#attached']['library'][] =
        'ambientimpact_ux/component.material.input';
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 *
 * This adds our 'node__extended' as a template suggestion so that we can
 * extend node.html.twig without re-implementing the whole template.
 */
function ambientimpact_base_theme_suggestions_node_alter(
  array &$suggestions, array $variables
) {
  $suggestions[] = 'node__extended';
}

/**
 * Prepares variables for the 'ambientimpact_block_social_links' block template.
 *
 * This attaches the 'ambientimpact_block/social_links.tooltips' library to the
 * block.
 */
function ambientimpact_base_preprocess_block__ambientimpact_block_social_links(
  array &$variables
) {
  $variables['#attached']['library'][] =
    'ambientimpact_block/component.social_links.tooltips';
}

/**
 * Prepares variables for the 'system_branding_block' block template.
 *
 * This adds and alters the necessary variables to allow greater customization
 * of the branding block compared to what Drupal core offers. A primary
 * motivation for this is that core doesn't provide a way to define dimensions
 * or alt text for the logo in a reusable way, other than hard coding those in
 * the block template, so this adds support for 'logo_alt', 'logo_width', and
 * 'logo_height' keys in a theme's .info.yml file. Additionally, a number of
 * other variables are exposed, as detailed below.
 *
 * Fetches the 'logo_alt', 'logo_width', and 'logo_height' keys from a theme's
 * .info.yml, if they exist, and adds the corresponding properties to
 * $variables['content']['site_logo'].
 *
 * Adds a 'front_page_url' variable, containing a Url object pointing to the
 * front page.
 *
 * Adds the 'site_logo_link_attributes' and 'site_name_link_attributes'
 * variables, both of which contain an Attributes object for their corresponding
 * links. If 'logo_width' is found in the active theme's .info.yml and is a
 * non-empty value, 'site_logo_link_attributes' will contain a 'style' attribute
 * with a 'max-width' equal to that value in px, if a 'max-width' is not already
 * set - this is to prevent phantom space when using the intrinsic ratio
 * wrapper.
 *
 * @see system_preprocess_block()
 *   Creates the 'site_logo', 'site_name', and 'site_slogan' variables.
 *
 * @see templates/block/block--system-branding-block.html.twig
 *   Altered from the Classy template to accomodate the above changes.
 *
 * @see https://www.drupal.org/project/drupal/issues/2780293
 *   Ongoing Drupal core issue to add configurable logo alt attribute.
 */
function ambientimpact_base_preprocess_block__system_branding_block(
  array &$variables
) {
  // Generate the 'front_page_url' variable if it hasn't been provided. This
  // allows customization of the front page URL if it varies based on some
  // criteria, e.g. cache contexts.
  //
  // @see https://www.drupal.org/docs/8/api/cache-api/cache-contexts
  //
  // @see hook_block_build_BASE_BLOCK_ID_alter()
  //   Cacheability metadata can be altered in this hook if need be.
  if (!isset($variables['front_page_url'])) {
    $variables['front_page_url'] = Url::fromRoute('<front>');
  }

  // Create the 'site_logo_link_attributes' and 'site_name_link_attributes'
  // variables if they don't exist yet.
  foreach (['site_logo', 'site_name'] as $key) {
    if (
      $variables['content'][$key]['#access'] &&
      !isset($variables[$key . '_link_attributes'])
    ) {
      $variables[$key . '_link_attributes'] = new Attribute();
    }
  }

  /** @var \Drupal\Core\Theme\ThemeManagerInterface */
  $themeManager = \Drupal::service('theme.manager');
  /** @var \Drupal\Core\Extension\ThemeHandlerInterface */
  $themeHandler = \Drupal::service('theme_handler');

  // This contains all of the key/value pairs in the theme's .info.yml file.
  /** @var array */
  $activeThemeInfo = $themeHandler->listInfo()[
    $themeManager->getActiveTheme()->getName()
  ]->info;

  if ($variables['content']['site_logo']['#access']) {
    // Update the logo URI just in case it's been changed in some other
    // preprocess function or hook.
    $variables['content']['site_logo']['#uri'] = $variables['site_logo'];

    foreach ([
      'logo_alt'    => 'alt',
      'logo_width'  => 'width',
      'logo_height' => 'height',
    ] as $key => $propertyName) {
      if (!empty($activeThemeInfo[$key])) {
        $variables['content']['site_logo']['#' . $propertyName] =
          $activeThemeInfo[$key];
      }
    }

    if (!empty($activeThemeInfo['logo_width'])) {
      // If a 'style' attribute already exists, try to explode it so that we can
      // determine if there's an existing max-width.
      if ($variables['site_logo_link_attributes']->offsetExists('style')) {
        $parsedStyleArray = explode(
          ';', $variables['site_logo_link_attributes']->offsetGet('style')
        );
      } else {
        $parsedStyleArray = [];
      }

      $keyedStyleArray = [];

      // Parse styles into key/value pairs.
      foreach ($parsedStyleArray as $delta => $value) {
        // Skip empty values.
        if (empty($value)) {
          continue;
        }

        $explodedValue = explode(':', $value);

        // Skip any values that can't be split into a property: value pair.
        if (count($explodedValue) !== 2) {
          continue;
        }

        $keyedStyleArray[trim($explodedValue[0])] = trim($explodedValue[1]);
      }

      // If no 'max-width' key exists, set it to the logo width and implode the
      // whole style array back into a string.
      if (!isset($keyedStyleArray['max-width'])) {
        $keyedStyleArray['max-width'] =
          $activeThemeInfo['logo_width'] . 'px';

        $newStyle = '';

        foreach ($keyedStyleArray as $propertyName => $propertyValue) {
          $newStyle .= $propertyName . ':' . $propertyValue . ';';
        }

        $variables['site_logo_link_attributes']->setAttribute(
          'style',
          $newStyle
        );
      }
    }
  }

  // Update the site name just in case it's been changed in some other
  // preprocess function or hook.
  if ($variables['content']['site_name']['#access']) {
    $variables['content']['site_name']['#markup'] = $variables['site_name'];
  }

  // Update the site slogan just in case it's been changed in some other
  // preprocess function or hook. Note the different structure than
  // $variables['site_name'], ugh.
  if ($variables['content']['site_slogan']['#access']) {
    $variables['content']['site_slogan']['#markup'] =
      $variables['site_slogan']['#markup'];
  }
}

/**
 * Prepares variables for field templates.
 *
 * This sets the 'constrain_width' value to false on media entity 'thumbnail'
 * fields so that small, low resolution thumbnails take up the same space as
 * high resolution thumbnails, in line with how they're shown in actual
 * YouTube/Vimeo embedded videos.
 *
 * This sets a max-width on image field items so that no phantom link space can
 * occur.
 *
 * This sets classes on link fields to indicate whether they have a link title
 * or are outputting the URL as their title. This is useful to force browsers to
 * wrap URLs so they don't break out of the layout.
 *
 * @see \Drupal\ambientimpact_media\Plugin\AmbientImpact\Component\Image::preprocessFieldSetImageFieldMaxWidth()
 *   This adds a max-width on each field item.
 */
function ambientimpact_base_preprocess_field(&$variables, $hook) {
  // Media thumbnail field.
  if (
    $variables['field_type'] === 'image' &&
    $variables['field_name'] === 'thumbnail'
  ) {
    foreach ($variables['items'] as $delta => &$item) {
      $item['content']['#constrain_width'] = false;
    }
  }

  if ($variables['field_type'] === 'image') {
    // Set a default for constrain_width in all image field items so that we
    // don't get an PHP undefined notice when the Image component attempts to
    // read it where it isn't already explicitly set. An example of this is on
    // user profile image fields.
    foreach ($variables['items'] as $delta => &$item) {
      if (!isset($item['content']['#constrain_width'])) {
        $item['content']['#constrain_width'] = true;
      }
    }

    $componentManager = \Drupal::service(
      'plugin.manager.ambientimpact_component'
    );
    $imageComponent = $componentManager->getComponentInstance('image');

    $imageComponent->preprocessFieldSetImageFieldMaxWidth($variables);
  }

  if ($variables['field_type'] === 'link') {
    foreach ($variables['element']['#items'] as $i => $item) {
      if (!empty($item->title)) {
        $linkClass = 'field__item--link-has-title';
      } else {
        $linkClass = 'field__item--link-no-title';
      }

      $variables['items'][$i]['attributes']->addClass($linkClass);
    }
  }
}

/**
 * Prepares variables for single local action link templates.
 *
 * Default template: menu-local-action.html.twig.
 *
 * This removes the default 'button' and 'button-action' classes from links
 * (to remove any default button styles) and adds our own BEM classes. This is
 * far easier to do in this function than in the Twig template, where it should
 * ideally be.
 *
 * Additionally, this wraps the link text in an icon.
 *
 * @param array $variables
 *   An associative array containing:
 *   - element: A render element containing:
 *     - #link: A menu link array with 'title', 'url', and (optionally)
 *       'localized_options' keys.
 *
 * @see template_preprocess_menu_local_action()
 *   Sets the default classes.
 */
function ambientimpact_base_preprocess_menu_local_action(&$variables) {
  $baseClass = 'action-links';
  $linkAttributes = &$variables['link']['#options']['attributes'];

  // Remove the 'button' and 'button-action' classes but leave any others
  // intact.
  foreach ($linkAttributes['class'] as $key => $class) {
    if (
      $class !== 'button' &&
      $class !== 'button-action'
    ) {
      continue;
    }

    unset($linkAttributes['class'][$key]);
  }

  // Re-number the array indices so they're sequential again as unsetting
  // doesn't remove the index.
  $linkAttributes['class'] = array_values($linkAttributes['class']);

  $linkAttributes['class'][] = $baseClass . '__link';

  $variables['attributes']['class'][] = $baseClass . '__item';

  // If the link text is a string (and not a render array), wrap it in an icon.
  // The check is to try and not conflict with modules that might have altered
  // the link in ways we're not expecting.
  if (gettype($variables['link']['#title']) === 'string') {
    $variables['link']['#title'] = [
      '#type'     => 'ambientimpact_icon',
      '#icon'     => 'plus',
      '#bundle'   => 'core',
      '#text'     => $variables['link']['#title'],
      '#containerAttributes'  => [
        'class'     => [$baseClass . '__icon'],
      ],
    ];
  }
}
