<?php

/**
 * Implements hook_element_info_alter().
 *
 * This attaches the textarea component to textareas.
 *
 * This attaches the Material input component to text input types.
 */
function ambientimpact_base_element_info_alter(array &$info) {
  if (isset($info['textarea'])) {
    $info['textarea']['#attached']['library'][] =
      'ambientimpact_ux/component.textarea';
  }

  foreach ([
    // Standard single-line text field.
   'textfield',

    // Standard multi-line textarea.
    'textarea',

    // Password fields.
    'password',
    'password_confirm',

    // HTML5 fields.
    'email',
    'search',
    'tel',
    'url',
    'number',
  ] as $elementName) {
    if (isset($info[$elementName])) {
      $info[$elementName]['#attached']['library'][] =
        'ambientimpact_core/component.material.input';
    }
  }
}

/**
 * Implements hook_theme_registry_alter().
 *
 * This defines the 'ratio' variable for 'image'.
 *
 * @todo Does this make more sense in ambientimpact_core?
 */
function ambientimpact_base_theme_registry_alter(&$themeRegistry) {
  $themeRegistry['image']['variables']['ratio'] = null;
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 *
 * This adds our 'node__extended' as a template suggestion so that we can
 * extend node.html.twig without re-implementing the whole template.
 */
function ambientimpact_base_theme_suggestions_node_alter(
  array &$suggestions, array $variables
) {
  $suggestions[] = 'node__extended';
}

/**
 * Prepares variables for block templates.
 *
 * This attaches the 'ambientimpact_block/social_links.tooltips' to
 * 'ambientimpact_block_social_links' blocks.
 */
function ambientimpact_base_preprocess_block(&$variables) {
  if ($variables['plugin_id'] === 'ambientimpact_block_social_links') {
    $variables['#attached']['library'][] =
      'ambientimpact_block/component.social_links.tooltips';
  }
}

/**
 * Prepares variables for image templates.
 *
 * Default template: image.html.twig.
 *
 * This adds the calculated 'ratio' variable, if width and height are available.
 *
 * @todo Does this make more sense in ambientimpact_media?
 */
function ambientimpact_base_preprocess_image(&$variables) {
  // Only set the ratio if we have both width and height.
  if (!empty($variables['width']) && !empty($variables['height'])) {
    $variables['ratio'] = $variables['height'] / $variables['width'];
  }
}

/**
 * Prepares variables for field templates.
 *
 * This sets a max-width on image field items so that no phantom link space can
 * occur.
 *
 * @see Drupal\ambientimpact_core\Plugin\AmbientImpact\Component\Image::preprocessFieldSetImageFieldMaxWidth()
 *   This adds a max-width on each field item.
 */
function ambientimpact_base_preprocess_field(&$variables, $hook) {
  if ($variables['field_type'] === 'image') {
    $componentManager = \Drupal::service(
      'plugin.manager.ambientimpact_component'
    );
    $imageComponent = $componentManager->getComponentInstance('image');

    $imageComponent->preprocessFieldSetImageFieldMaxWidth($variables['items']);
  }
}

/**
 * Prepares variables for single local action link templates.
 *
 * Default template: menu-local-action.html.twig.
 *
 * This removes the default 'button' and 'button-action' classes from links
 * (to remove any default button styles) and adds our own BEM classes. This is
 * far easier to do in this function than in the Twig template, where it should
 * ideally be.
 *
 * Additionally, this wraps the link text in an icon.
 *
 * @param array $variables
 *   An associative array containing:
 *   - element: A render element containing:
 *     - #link: A menu link array with 'title', 'url', and (optionally)
 *       'localized_options' keys.
 *
 * @see template_preprocess_menu_local_action()
 *   Sets the default classes.
 */
function ambientimpact_base_preprocess_menu_local_action(&$variables) {
  $baseClass = 'action-links';
  $linkAttributes = &$variables['link']['#options']['attributes'];

  // Remove the 'button' and 'button-action' classes but leave any others
  // intact.
  foreach ($linkAttributes['class'] as $key => $class) {
    if (
      $class !== 'button' &&
      $class !== 'button-action'
    ) {
      continue;
    }

    unset($linkAttributes['class'][$key]);
  }

  // Re-number the array indices so they're sequential again as unsetting
  // doesn't remove the index.
  $linkAttributes['class'] = array_values($linkAttributes['class']);

  $linkAttributes['class'][] = $baseClass . '__link';

  $variables['attributes']['class'][] = $baseClass . '__item';

  // If the link text is a string (and not a render array), wrap it in an icon.
  // The check is to try and not conflict with modules that might have altered
  // the link in ways we're not expecting.
  if (gettype($variables['link']['#title']) === 'string') {
    $variables['link']['#title'] = [
      '#type'     => 'ambientimpact_icon',
      '#icon'     => 'add',
      '#bundle'   => 'core',
      '#text'     => $variables['link']['#title'],
      '#containerAttributes'  => [
        'class'     => [$baseClass . '__icon'],
      ],
    ];
  }
}
